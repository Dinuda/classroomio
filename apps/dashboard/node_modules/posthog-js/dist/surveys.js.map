{"version":3,"file":"surveys.js","sources":["../src/posthog-surveys-types.ts","../src/utils/type-utils.ts","../src/utils/globals.ts","../src/extensions/surveys/surveys-utils.ts","../src/extensions/surveys-widget.ts","../src/extensions/surveys.ts","../src/loader-surveys.ts"],"sourcesContent":["/**\n * Having Survey types in types.ts was confusing tsc\n * and generating an invalid module.d.ts\n * See https://github.com/PostHog/posthog-js/issues/698\n */\n\nexport interface SurveyAppearance {\n    // keep in sync with frontend/src/types.ts -> SurveyAppearance\n    backgroundColor?: string\n    submitButtonColor?: string\n    textColor?: string\n    // deprecate submit button text eventually\n    submitButtonText?: string\n    descriptionTextColor?: string\n    ratingButtonColor?: string\n    ratingButtonActiveColor?: string\n    ratingButtonHoverColor?: string\n    whiteLabel?: boolean\n    autoDisappear?: boolean\n    displayThankYouMessage?: boolean\n    thankYouMessageHeader?: string\n    thankYouMessageDescription?: string\n    borderColor?: string\n    position?: 'left' | 'right' | 'center'\n    placeholder?: string\n    // widget options\n    widgetType?: 'button' | 'tab' | 'selector'\n    widgetSelector?: string\n    widgetLabel?: string\n    widgetColor?: string\n    // questionable: Not in frontend/src/types.ts -> SurveyAppearance, but used in site app\n    maxWidth?: string\n    zIndex?: string\n}\n\nexport enum SurveyType {\n    Popover = 'popover',\n    API = 'api',\n    Widget = 'widget',\n}\n\nexport type SurveyQuestion = BasicSurveyQuestion | LinkSurveyQuestion | RatingSurveyQuestion | MultipleSurveyQuestion\n\ninterface SurveyQuestionBase {\n    question: string\n    description?: string | null\n    optional?: boolean\n    buttonText?: string\n}\n\nexport interface BasicSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Open\n}\n\nexport interface LinkSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Link\n    link: string | null\n}\n\nexport interface RatingSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.Rating\n    display: 'number' | 'emoji'\n    scale: number\n    lowerBoundLabel: string\n    upperBoundLabel: string\n}\n\nexport interface MultipleSurveyQuestion extends SurveyQuestionBase {\n    type: SurveyQuestionType.SingleChoice | SurveyQuestionType.MultipleChoice\n    choices: string[]\n    hasOpenChoice?: boolean\n}\n\nexport enum SurveyQuestionType {\n    Open = 'open',\n    MultipleChoice = 'multiple_choice',\n    SingleChoice = 'single_choice',\n    Rating = 'rating',\n    Link = 'link',\n}\n\nexport interface SurveyResponse {\n    surveys: Survey[]\n}\n\nexport type SurveyCallback = (surveys: Survey[]) => void\n\nexport type SurveyUrlMatchType = 'regex' | 'exact' | 'icontains'\n\nexport interface Survey {\n    // Sync this with the backend's SurveyAPISerializer!\n    id: string\n    name: string\n    description: string\n    type: SurveyType\n    linked_flag_key: string | null\n    targeting_flag_key: string | null\n    questions: SurveyQuestion[]\n    appearance: SurveyAppearance | null\n    conditions: {\n        url?: string\n        selector?: string\n        seenSurveyWaitPeriodInDays?: number\n        urlMatchType?: SurveyUrlMatchType\n    } | null\n    start_date: string | null\n    end_date: string | null\n}\n","// eslint-disable-next-line posthog-js/no-direct-array-check\nconst nativeIsArray = Array.isArray\nconst ObjProto = Object.prototype\nexport const hasOwnProperty = ObjProto.hasOwnProperty\nconst toString = ObjProto.toString\n\nexport const _isArray =\n    nativeIsArray ||\n    function (obj: any): obj is any[] {\n        return toString.call(obj) === '[object Array]'\n    }\nexport const _isUint8Array = function (x: unknown): x is Uint8Array {\n    return toString.call(x) === '[object Uint8Array]'\n}\n// from a comment on http://dbj.org/dbj/?p=286\n// fails on only one very rare and deliberate custom object:\n// let bomb = { toString : undefined, valueOf: function(o) { return \"function BOMBA!\"; }};\nexport const _isFunction = function (f: any): f is (...args: any[]) => any {\n    // eslint-disable-next-line posthog-js/no-direct-function-check\n    return typeof f === 'function'\n}\n// Underscore Addons\nexport const _isObject = function (x: unknown): x is Record<string, any> {\n    // eslint-disable-next-line posthog-js/no-direct-object-check\n    return x === Object(x) && !_isArray(x)\n}\nexport const _isEmptyObject = function (x: unknown): x is Record<string, any> {\n    if (_isObject(x)) {\n        for (const key in x) {\n            if (hasOwnProperty.call(x, key)) {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\nexport const _isUndefined = function (x: unknown): x is undefined {\n    return x === void 0\n}\nexport const _isString = function (x: unknown): x is string {\n    // eslint-disable-next-line posthog-js/no-direct-string-check\n    return toString.call(x) == '[object String]'\n}\n\nexport const _isNull = function (x: unknown): x is null {\n    // eslint-disable-next-line posthog-js/no-direct-null-check\n    return x === null\n}\nexport const _isDate = function (x: unknown): x is Date {\n    // eslint-disable-next-line posthog-js/no-direct-date-check\n    return toString.call(x) == '[object Date]'\n}\nexport const _isNumber = function (x: unknown): x is number {\n    // eslint-disable-next-line posthog-js/no-direct-number-check\n    return toString.call(x) == '[object Number]'\n}\nexport const _isBoolean = function (x: unknown): x is boolean {\n    // eslint-disable-next-line posthog-js/no-direct-boolean-check\n    return toString.call(x) === '[object Boolean]'\n}\n","/*\n * Saved references to long variable names, so that bundling can minimize file size.\n */\nexport const ArrayProto = Array.prototype\nexport const nativeForEach = ArrayProto.forEach\nexport const nativeIndexOf = ArrayProto.indexOf\n// eslint-disable-next-line no-restricted-globals\nexport const win: (Window & typeof globalThis) | undefined = typeof window !== 'undefined' ? window : undefined\nconst navigator = win?.navigator\nexport const document = win?.document\nexport const userAgent = navigator?.userAgent\nexport const assignableWindow: Window & typeof globalThis & Record<string, any> = win ?? ({} as any)\n\nexport { win as window }\n","import { PostHog } from 'posthog-core'\nimport {\n    BasicSurveyQuestion,\n    LinkSurveyQuestion,\n    MultipleSurveyQuestion,\n    RatingSurveyQuestion,\n    Survey,\n    SurveyAppearance,\n    SurveyQuestion,\n} from '../../posthog-surveys-types'\nimport { _isUndefined } from '../../utils/type-utils'\nimport { window as _window, document as _document } from '../../utils/globals'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst window = _window as Window & typeof globalThis\nconst document = _document as Document\n\nexport const style = (id: string, appearance: SurveyAppearance | null) => {\n    const positions = {\n        left: 'left: 30px;',\n        right: 'right: 30px;',\n        center: `\n            left: 50%;\n            transform: translateX(-50%);\n          `,\n    }\n    return `\n          .survey-${id}-form {\n              position: fixed;\n              margin: 0px;\n              bottom: 0px;\n              color: black;\n              font-weight: normal;\n              font-family: -apple-system, BlinkMacSystemFont, \"Inter\", \"Segoe UI\", \"Roboto\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n              text-align: left;\n              max-width: ${parseInt(appearance?.maxWidth || '290')}px;\n              z-index: ${parseInt(appearance?.zIndex || '99999')};\n              border: 1.5px solid ${appearance?.borderColor || '#c9c6c6'};\n              border-bottom: 0px;\n              width: 100%;\n              ${positions[appearance?.position || 'right'] || 'right: 30px;'}\n          }\n          .survey-${id}-form .tab {\n              display: none;\n          }\n          .form-submit[disabled] {\n              opacity: 0.6;\n              filter: grayscale(100%);\n              cursor: not-allowed;\n          }\n          .survey-${id}-form {\n              flex-direction: column;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n              border-top-left-radius: 10px;\n              border-top-right-radius: 10px;\n              box-shadow: -6px 0 16px -8px rgb(0 0 0 / 8%), -9px 0 28px 0 rgb(0 0 0 / 5%), -12px 0 48px 16px rgb(0 0 0 / 3%);\n          }\n          .survey-${id}-form textarea {\n              color: #2d2d2d;\n              font-size: 14px;\n              font-family: -apple-system, BlinkMacSystemFont, \"Inter\", \"Segoe UI\", \"Roboto\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n              background: white;\n              color: black;\n              outline: none;\n              padding-left: 10px;\n              padding-right: 10px;\n              padding-top: 10px;\n              border-radius: 6px;\n              border-color: ${appearance?.borderColor || '#c9c6c6'};\n              margin-top: 14px; \n          }\n          .form-submit {\n              box-sizing: border-box;\n              margin: 0;\n              font-family: inherit;\n              overflow: visible;\n              text-transform: none;\n              position: relative;\n              display: inline-block;\n              font-weight: 700;\n              white-space: nowrap;\n              text-align: center;\n              border: 1.5px solid transparent;\n              cursor: pointer;\n              user-select: none;\n              touch-action: manipulation;\n              padding: 12px;\n              font-size: 14px;\n              border-radius: 6px;\n              outline: 0;\n              background: ${appearance?.submitButtonColor || 'black'} !important;\n              text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.12);\n              box-shadow: 0 2px 0 rgba(0, 0, 0, 0.045);\n              width: 100%;\n          }\n          .form-cancel {\n              float: right;\n              border: none;\n              background: none;\n              cursor: pointer;\n          }\n          .cancel-btn-wrapper {\n              position: absolute;\n              width: 35px;\n              height: 35px;\n              border-radius: 100%;\n              top: 0;\n              right: 0;\n              transform: translate(50%, -50%);\n              background: white;\n              border: 1.5px solid ${appearance?.borderColor || '#c9c6c6'};\n              display: flex;\n              justify-content: center;\n              align-items: center;\n          }\n          .bolded { font-weight: 600; }\n          .buttons {\n              display: flex;\n              justify-content: center;\n          }\n          .footer-branding {\n              font-size: 11px;\n              margin-top: 10px;\n              text-align: center;\n              display: flex;\n              justify-content: center;\n              gap: 4px;\n              align-items: center;\n              font-weight: 500;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n              text-decoration: none;\n          }\n          .survey-${id}-box {\n              padding: 20px 25px 10px;\n              display: flex;\n              flex-direction: column;\n          }\n          .survey-question {\n              font-weight: 500;\n              font-size: 14px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n          }\n          .question-textarea-wrapper {\n              display: flex;\n              flex-direction: column;\n          }\n          .description {\n              font-size: 13px;\n              margin-top: 5px;\n              opacity: .60;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n          }\n          .ratings-number {\n              background-color: ${appearance?.ratingButtonColor || 'white'};\n              font-size: 14px;\n              padding: 8px 0px;\n              border: none;\n          }\n          .ratings-number:hover {\n              cursor: pointer;\n          }\n          .rating-options {\n              margin-top: 14px;\n          }\n          .rating-options-buttons {\n              display: grid;\n              border-radius: 6px;\n              overflow: hidden;\n              border: 1.5px solid ${appearance?.borderColor || '#c9c6c6'};\n          }\n          .rating-options-buttons > .ratings-number {\n              border-right: 1px solid ${appearance?.borderColor || '#c9c6c6'};\n          }\n          .rating-options-buttons > .ratings-number:last-of-type {\n              border-right: 0px;\n          }\n          .rating-options-buttons .rating-active {\n              background: ${appearance?.ratingButtonActiveColor || 'black'};\n          }\n          .rating-options-emoji {\n              display: flex;\n              justify-content: space-between;\n          }\n          .ratings-emoji {\n              font-size: 16px;\n              background-color: transparent;\n              border: none;\n              padding: 0px;\n          }\n          .ratings-emoji:hover {\n              cursor: pointer;\n          }\n          .ratings-emoji.rating-active svg {\n              fill: ${appearance?.ratingButtonActiveColor || 'black'};\n          }\n          .emoji-svg {\n              fill: ${appearance?.ratingButtonColor || '#c9c6c6'};\n          }\n          .rating-text {\n              display: flex;\n              flex-direction: row;\n              font-size: 11px;\n              justify-content: space-between;\n              margin-top: 6px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n              opacity: .60;\n          }\n          .multiple-choice-options {\n              margin-top: 13px;\n              font-size: 14px;\n          }\n          .multiple-choice-options .choice-option {\n              display: flex;\n              align-items: center;\n              gap: 4px;\n              font-size: 13px;\n              cursor: pointer;\n              margin-bottom: 5px;\n              position: relative;\n          }\n          .multiple-choice-options > .choice-option:last-of-type {\n              margin-bottom: 0px;\n          }\n          .multiple-choice-options input {\n              cursor: pointer;\n              position: absolute;\n              opacity: 0;\n          }\n          .choice-check {\n              position: absolute;\n              right: 10px;\n              background: white;\n          }\n          .choice-check svg {\n              display: none;\n          }\n          .multiple-choice-options .choice-option:hover .choice-check svg {\n              display: inline-block;\n              opacity: .25;\n          }\n          .multiple-choice-options input:checked + label + .choice-check svg {\n              display: inline-block;\n              opacity: 100% !important;\n          }\n          .multiple-choice-options input:checked + label {\n              font-weight: bold;\n              border: 1.5px solid rgba(0,0,0);\n          }\n          .multiple-choice-options input:checked + label input {\n              font-weight: bold;\n          }\n          .multiple-choice-options label {\n              width: 100%;\n              cursor: pointer;\n              padding: 10px;\n              border: 1.5px solid rgba(0,0,0,.25);\n              border-radius: 4px;\n              background: white;\n          }\n          .multiple-choice-options .choice-option-open label {\n              padding-right: 30px;\n              display: flex;\n              flex-wrap: wrap;\n              gap: 8px;\n              max-width: 100%;\n          }\n          .multiple-choice-options .choice-option-open label span {\n              width: 100%;\n          }\n          .multiple-choice-options .choice-option-open input:disabled + label {\n              opacity: 0.6;\n          }\n          .multiple-choice-options .choice-option-open label input {\n              position: relative;\n              opacity: 1;\n              flex-grow: 1;\n              border: 0;\n              outline: 0;\n          }\n          .thank-you-message {\n              position: fixed;\n              bottom: 0px;\n              z-index: ${parseInt(appearance?.zIndex || '99999')};\n              box-shadow: -6px 0 16px -8px rgb(0 0 0 / 8%), -9px 0 28px 0 rgb(0 0 0 / 5%), -12px 0 48px 16px rgb(0 0 0 / 3%);\n              font-family: -apple-system, BlinkMacSystemFont, \"Inter\", \"Segoe UI\", \"Roboto\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n              border-top-left-radius: 10px;\n              border-top-right-radius: 10px;\n              padding: 20px 25px 10px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n              border: 1.5px solid ${appearance?.borderColor || '#c9c6c6'};\n              text-align: center;\n              max-width: ${parseInt(appearance?.maxWidth || '290')}px;\n              min-width: 150px;\n              width: 100%;\n              ${positions[appearance?.position || 'right'] || 'right: 30px;'}\n          }\n          .thank-you-message-body {\n              margin-top: 6px;\n              font-size: 14px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n          }\n          .thank-you-message-header {\n              margin: 10px 0px 0px;\n              background: ${appearance?.backgroundColor || '#eeeded'};\n          }\n          .thank-you-message-container .form-submit {\n              margin-top: 20px;\n              margin-bottom: 10px;\n          }\n          .thank-you-message-countdown {\n              margin-left: 6px;\n          }\n          .bottom-section {\n              margin-top: 14px;\n          }\n          `\n}\n\nexport const createSingleQuestionSurvey = (posthog: PostHog, survey: Survey, question: SurveyQuestion) => {\n    const questionType = question.type\n    if (questionType === 'rating') {\n        return createRatingsPopup(posthog, survey, question, 0)\n    } else if (questionType === 'open' || questionType === 'link') {\n        return createOpenTextOrLinkPopup(posthog, survey, question, 0)\n    } else if (questionType === 'single_choice' || questionType === 'multiple_choice') {\n        return createMultipleChoicePopup(posthog, survey, question, 0)\n    }\n    return null\n}\n\nexport const createMultipleQuestionSurvey = (posthog: PostHog, survey: Survey) => {\n    const questions = survey.questions\n    const questionTypeMapping = {\n        open: createOpenTextOrLinkPopup,\n        link: createOpenTextOrLinkPopup,\n        rating: createRatingsPopup,\n        single_choice: createMultipleChoicePopup,\n        multiple_choice: createMultipleChoicePopup,\n    }\n    const multipleQuestionForm = Object.assign(document.createElement('form'), {\n        className: `survey-${survey.id}-form`,\n        onsubmit: (e: Event) => {\n            e.preventDefault()\n            const multipleQuestionResponses: Record<string, string | number | string[] | null> = {}\n            const allTabs = (e.target as HTMLDivElement).getElementsByClassName('tab')\n            for (const [index, tab] of [...allTabs].entries()) {\n                const classes = tab.classList\n                const questionType = classes[2]\n                let response\n                if (questionType === 'open') {\n                    response = tab.querySelector('textarea')?.value\n                } else if (questionType === 'link') {\n                    response = 'link clicked'\n                } else if (questionType === 'rating') {\n                    response = parseInt((tab.querySelector('.rating-active') as HTMLButtonElement)?.value)\n                } else if (questionType === 'single_choice' || questionType === 'multiple_choice') {\n                    const selectedChoices =\n                        questionType === 'single_choice'\n                            ? (tab.querySelector('input[type=radio]:checked') as HTMLInputElement).value\n                            : [\n                                  ...(tab.querySelectorAll(\n                                      'input[type=checkbox]:checked'\n                                  ) as NodeListOf<HTMLInputElement>),\n                              ].map((choice) => choice.value)\n                    response = selectedChoices\n                }\n                const isQuestionOptional = survey.questions[index].optional\n                if (isQuestionOptional && _isUndefined(response)) {\n                    response = null\n                }\n                if (!_isUndefined(response)) {\n                    if (index === 0) {\n                        multipleQuestionResponses['$survey_response'] = response\n                    } else {\n                        multipleQuestionResponses[`$survey_response_${index}`] = response\n                    }\n                }\n            }\n            posthog.capture('survey sent', {\n                $survey_name: survey.name,\n                $survey_id: survey.id,\n                $survey_questions: survey.questions.map((question) => question.question),\n                sessionRecordingUrl: posthog.get_session_replay_url?.(),\n                ...multipleQuestionResponses,\n                $set: {\n                    [`$survey_responded/${survey.id}`]: true,\n                },\n            })\n            window.setTimeout(() => {\n                window.dispatchEvent(new Event('PHSurveySent'))\n            }, 200)\n            closeSurveyPopup(survey.id, multipleQuestionForm)\n        },\n    })\n\n    questions.map((question, idx) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore // TODO: Fix this, error because of survey question type mapping\n        const questionElement = questionTypeMapping[question.type](posthog, survey, question, idx)\n        const questionTab = document.createElement('div')\n        questionTab.className = `tab question-${idx} ${question.type}`\n        if (idx < questions.length - 1) {\n            const questionElementSubmitButton = questionElement.getElementsByClassName(\n                'form-submit'\n            )[0] as HTMLButtonElement\n            questionElementSubmitButton.innerText = question.buttonText || 'Next'\n            questionElementSubmitButton.type = 'button'\n            questionElementSubmitButton.addEventListener('click', () => {\n                nextQuestion(idx, survey.id)\n            })\n        }\n        questionTab.insertAdjacentElement('beforeend', questionElement)\n\n        multipleQuestionForm.insertAdjacentElement('beforeend', questionTab)\n    })\n\n    return multipleQuestionForm\n}\n\nexport const createRatingsPopup = (\n    posthog: PostHog,\n    survey: Survey,\n    question: RatingSurveyQuestion,\n    questionIndex: number\n) => {\n    const scale = question.scale\n    const starting = question.scale === 10 ? 0 : 1\n    const displayType = question.display\n    const isOptional = !!question.optional\n    const ratingOptionsElement = document.createElement('div')\n    if (displayType === 'number') {\n        ratingOptionsElement.className = 'rating-options-buttons'\n        ratingOptionsElement.style.gridTemplateColumns = `repeat(${scale - starting + 1}, minmax(0, 1fr))`\n        for (let i = starting; i <= scale; i++) {\n            const buttonElement = document.createElement('button')\n            buttonElement.className = `ratings-number question-${questionIndex}-rating-${i} auto-text-color`\n            buttonElement.type = 'submit'\n            buttonElement.value = `${i}`\n            buttonElement.innerHTML = `${i}`\n            ratingOptionsElement.append(buttonElement)\n        }\n    } else if (displayType === 'emoji') {\n        ratingOptionsElement.className = 'rating-options-emoji'\n        const threeEmojis = [dissatisfiedEmoji, neutralEmoji, satisfiedEmoji]\n        const fiveEmojis = [veryDissatisfiedEmoji, dissatisfiedEmoji, neutralEmoji, satisfiedEmoji, verySatisfiedEmoji]\n        for (let i = 1; i <= scale; i++) {\n            const emojiElement = document.createElement('button')\n            emojiElement.className = `ratings-emoji question-${questionIndex}-rating-${i}`\n            emojiElement.type = 'submit'\n            emojiElement.value = `${i}`\n            emojiElement.innerHTML = scale === 3 ? threeEmojis[i - 1] : fiveEmojis[i - 1]\n            ratingOptionsElement.append(emojiElement)\n        }\n    }\n    const ratingsForm = `\n    <div class=\"survey-${survey.id}-box\">\n        <div class=\"cancel-btn-wrapper\">\n            <button class=\"form-cancel\" type=\"cancel\">${cancelSVG}</button>\n        </div>\n        <div class=\"survey-question auto-text-color\">${question.question}</div>\n        ${question.description ? `<span class=\"description auto-text-color\">${question.description}</span>` : ''}\n        <div class=\"rating-section\">\n            <div class=\"rating-options\">\n            </div>\n            ${\n                question.lowerBoundLabel || question.upperBoundLabel\n                    ? `<div class=\"rating-text auto-text-color\">\n            <div>${question.lowerBoundLabel || ''}</div>\n            <div>${question.upperBoundLabel || ''}</div>\n            </div>`\n                    : ''\n            }\n            <div class=\"bottom-section\">\n            <div class=\"buttons\">\n                <button class=\"form-submit auto-text-color\" type=\"submit\" ${isOptional ? '' : 'disabled'}>${\n        question.buttonText || survey.appearance?.submitButtonText || 'Submit'\n    }</button>\n            </div>\n            <a href=\"https://posthog.com\" target=\"_blank\" rel=\"noopener\" class=\"footer-branding auto-text-color\">Survey by ${posthogLogo}</a>\n        </div>\n        </div>\n    </div>\n            `\n    let formElement: HTMLFormElement | HTMLDivElement\n    if (survey.questions.length === 1) {\n        formElement = Object.assign(document.createElement('form'), {\n            className: `survey-${survey.id}-form`,\n            innerHTML: ratingsForm,\n            onsubmit: (e: Event) => {\n                e.preventDefault()\n                const activeRatingEl = formElement.querySelector('.rating-active')\n                posthog.capture('survey sent', {\n                    $survey_name: survey.name,\n                    $survey_id: survey.id,\n                    $survey_question: question.question,\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore // TODO: Fix this, error because it doesn't know that the target is a button\n                    $survey_response: parseInt(activeRatingEl?.value),\n                    sessionRecordingUrl: posthog.get_session_replay_url?.(),\n                    $set: {\n                        [`$survey_responded/${survey.id}`]: true,\n                    },\n                })\n                window.setTimeout(() => {\n                    window.dispatchEvent(new Event('PHSurveySent'))\n                }, 200)\n                closeSurveyPopup(survey.id, formElement as HTMLFormElement)\n            },\n        })\n    } else {\n        formElement = Object.assign(document.createElement('div'), {\n            innerHTML: ratingsForm,\n        })\n    }\n    formElement.getElementsByClassName('rating-options')[0].insertAdjacentElement('afterbegin', ratingOptionsElement)\n    const allElements =\n        question.scale === 10 ? [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] : question.scale === 5 ? [1, 2, 3, 4, 5] : [1, 2, 3]\n    for (const x of allElements) {\n        const ratingEl = formElement.getElementsByClassName(`question-${questionIndex}-rating-${x}`)[0]\n        ratingEl.addEventListener('click', (e) => {\n            e.preventDefault()\n            for (const activeRatingEl of formElement.getElementsByClassName('rating-active')) {\n                activeRatingEl.classList.remove('rating-active')\n            }\n            ratingEl.classList.add('rating-active')\n            if (formElement.querySelector('.form-submit')) {\n                ;(formElement.querySelector('.form-submit') as HTMLButtonElement).disabled = false\n            }\n            setTextColors(formElement)\n        })\n    }\n\n    return formElement\n}\n\nexport const createOpenTextOrLinkPopup = (\n    posthog: PostHog,\n    survey: Survey,\n    question: BasicSurveyQuestion | LinkSurveyQuestion,\n    questionIndex: number\n) => {\n    const surveyQuestionType = question.type\n    const surveyDescription = question.description\n    const questionText = question.question\n    const isOptional = !!question.optional\n    const form = `\n    <div class=\"survey-${survey.id}-box\">\n        <div class=\"cancel-btn-wrapper\">\n            <button class=\"form-cancel\" type=\"cancel\">${cancelSVG}</button>\n        </div>\n        <div class=\"question-textarea-wrapper\">\n            <div class=\"survey-question auto-text-color\">${questionText}</div>\n            ${surveyDescription ? `<span class=\"description auto-text-color\">${surveyDescription}</span>` : ''}\n            ${\n                surveyQuestionType === 'open'\n                    ? `<textarea class=\"survey-textarea-question${questionIndex}\" name=\"survey\" rows=4 placeholder=\"${\n                          survey.appearance?.placeholder || ''\n                      }\"></textarea>`\n                    : ''\n            }\n        </div>\n        <div class=\"bottom-section\">\n            <div class=\"buttons\">\n                <button class=\"form-submit auto-text-color\" type=\"submit\">${\n                    question.buttonText || survey.appearance?.submitButtonText || 'Submit'\n                }</button>\n            </div>\n            <a href=\"https://posthog.com\" target=\"_blank\" rel=\"noopener\" class=\"footer-branding auto-text-color\">Survey by ${posthogLogo}</a>\n        </div>\n    </div>\n`\n    let formElement: HTMLFormElement | HTMLDivElement\n    if (survey.questions.length === 1) {\n        formElement = Object.assign(document.createElement('form'), {\n            className: `survey-${survey.id}-form`,\n            innerHTML: form,\n            onsubmit: function (e: any) {\n                e.preventDefault()\n                const surveyQuestionType = question.type\n                posthog.capture('survey sent', {\n                    $survey_name: survey.name,\n                    $survey_id: survey.id,\n                    $survey_question: survey.questions[0].question,\n                    $survey_response: surveyQuestionType === 'open' ? e.target.survey.value : 'link clicked',\n                    sessionRecordingUrl: posthog.get_session_replay_url?.(),\n                    $set: {\n                        [`$survey_responded/${survey.id}`]: true,\n                    },\n                })\n                if (surveyQuestionType === 'link' && question.link) {\n                    window.open(question.link)\n                }\n                window.setTimeout(() => {\n                    window.dispatchEvent(new Event('PHSurveySent'))\n                }, 200)\n                closeSurveyPopup(survey.id, formElement as HTMLFormElement)\n            },\n        })\n    } else {\n        formElement = Object.assign(document.createElement('div'), {\n            innerHTML: form,\n        })\n        const submitButton = formElement.querySelector('.form-submit') as HTMLButtonElement\n        submitButton.addEventListener('click', () => {\n            if (surveyQuestionType === 'link') {\n                window.open(question.link || undefined)\n            }\n        })\n    }\n    if (!isOptional) {\n        if (surveyQuestionType === 'open') {\n            ;(formElement.querySelector('.form-submit') as HTMLButtonElement).disabled = true\n        }\n        formElement.addEventListener('input', (e: any) => {\n            if (formElement.querySelector('.form-submit')) {\n                const submitButton = formElement.querySelector('.form-submit') as HTMLButtonElement\n                submitButton.disabled = !e.target.value\n            }\n        })\n    }\n\n    return formElement\n}\n\nexport const createMultipleChoicePopup = (\n    posthog: PostHog,\n    survey: Survey,\n    question: MultipleSurveyQuestion,\n    questionIndex: number\n) => {\n    const surveyQuestion = question.question\n    const surveyDescription = question.description\n    const surveyQuestionChoices = question.choices\n    const isSingleChoice = question.type === 'single_choice'\n    const isOptional = !!question.optional\n    const hasOpenChoice = !!question.hasOpenChoice\n\n    const form = `\n    <div class=\"survey-${survey.id}-box\">\n        <div class=\"cancel-btn-wrapper\">\n            <button class=\"form-cancel\" type=\"cancel\">${cancelSVG}</button>\n        </div>\n        <div class=\"survey-question auto-text-color\">${surveyQuestion}</div>\n        ${surveyDescription ? `<span class=\"description auto-text-color\">${surveyDescription}</span>` : ''}\n        <div class=\"multiple-choice-options\">\n        ${surveyQuestionChoices\n            .map((option, idx) => {\n                let choiceClass = 'choice-option'\n                let val = option\n                if (hasOpenChoice && idx === surveyQuestionChoices.length - 1) {\n                    option = `<span>${option}:</span><input type=\"text\" value=\"\">`\n                    choiceClass += ' choice-option-open'\n                    val = ''\n                }\n                const inputType = isSingleChoice ? 'radio' : 'checkbox'\n                const singleOrMultiSelectString = `<div class=\"${choiceClass}\">\n                    <input type=\"${inputType}\" id=surveyQuestion${questionIndex}Choice${idx}\n                        name=\"question${questionIndex}\" value=\"${val}\" ${val ? '' : 'disabled'}>\n                    <label class=\"auto-text-color\" for=surveyQuestion${questionIndex}Choice${idx}>\n                        ${option}\n                    </label>\n                    <span class=\"choice-check auto-text-color\">${checkSVG}</span>\n                </div>`\n                return singleOrMultiSelectString\n            })\n            .join(' ')}\n        </div>\n        <div class=\"bottom-section\">\n        <div class=\"buttons\">\n            <button class=\"form-submit auto-text-color\" type=\"submit\" ${isOptional ? '' : 'disabled'}>${\n        question.buttonText || survey.appearance?.submitButtonText || 'Submit'\n    }</button>\n        </div>\n        <a href=\"https://posthog.com\" target=\"_blank\" rel=\"noopener\" class=\"footer-branding auto-text-color\">Survey by ${posthogLogo}</a>\n    </div>\n\n    </div>\n    `\n    let formElement: HTMLFormElement | HTMLDivElement\n    if (survey.questions.length === 1) {\n        formElement = Object.assign(document.createElement('form'), {\n            className: `survey-${survey.id}-form`,\n            innerHTML: form,\n            onsubmit: (e: Event) => {\n                e.preventDefault()\n                const targetElement = e.target as HTMLFormElement\n                const selectedChoices = isSingleChoice\n                    ? (targetElement.querySelector('input[type=radio]:checked') as HTMLInputElement)?.value\n                    : [\n                          ...(targetElement.querySelectorAll(\n                              'input[type=checkbox]:checked'\n                          ) as NodeListOf<HTMLInputElement>),\n                      ].map((choice) => choice.value)\n                posthog.capture('survey sent', {\n                    $survey_name: survey.name,\n                    $survey_id: survey.id,\n                    $survey_question: survey.questions[0].question,\n                    $survey_response: selectedChoices,\n                    sessionRecordingUrl: posthog.get_session_replay_url?.(),\n                    $set: {\n                        [`$survey_responded/${survey.id}`]: true,\n                    },\n                })\n                window.setTimeout(() => {\n                    window.dispatchEvent(new Event('PHSurveySent'))\n                }, 200)\n                closeSurveyPopup(survey.id, formElement as HTMLFormElement)\n            },\n        })\n    } else {\n        formElement = Object.assign(document.createElement('div'), {\n            innerHTML: form,\n        })\n    }\n    if (!isOptional) {\n        formElement.addEventListener('change', () => {\n            const selectedChoices: NodeListOf<HTMLInputElement> = isSingleChoice\n                ? formElement.querySelectorAll('input[type=radio]:checked')\n                : formElement.querySelectorAll('input[type=checkbox]:checked')\n            if ((selectedChoices.length ?? 0) > 0) {\n                ;(formElement.querySelector('.form-submit') as HTMLButtonElement).disabled = false\n            } else {\n                ;(formElement.querySelector('.form-submit') as HTMLButtonElement).disabled = true\n            }\n        })\n    }\n    const openChoiceWrappers = formElement.querySelectorAll('.choice-option-open')\n    for (const openChoiceWrapper of openChoiceWrappers) {\n        const textInput = openChoiceWrapper.querySelector('input[type=text]') as HTMLInputElement\n        const inputType = isSingleChoice ? 'radio' : 'checkbox'\n        const checkInput = openChoiceWrapper.querySelector(`input[type=${inputType}]`) as HTMLInputElement\n        openChoiceWrapper.addEventListener('click', () => {\n            if (checkInput?.checked || checkInput?.disabled) textInput?.focus()\n        })\n        textInput.addEventListener('click', (e) => e.stopPropagation())\n        textInput.addEventListener('input', (e) => {\n            const textInput = e.target as HTMLInputElement\n            if (checkInput) {\n                checkInput.value = textInput.value\n                if (textInput.value) {\n                    checkInput.disabled = false\n                    checkInput.checked = true\n                } else {\n                    checkInput.disabled = true\n                    checkInput.checked = false\n                }\n                formElement.dispatchEvent(new Event('change'))\n            }\n        })\n    }\n\n    return formElement\n}\n\nexport const closeSurveyPopup = (surveyId: string, surveyPopup: HTMLFormElement) => {\n    Object.assign(surveyPopup.style, { display: 'none' })\n    localStorage.setItem(`seenSurvey_${surveyId}`, 'true')\n    window.setTimeout(() => {\n        window.dispatchEvent(new Event('PHSurveyClosed'))\n    }, 2000)\n    surveyPopup.reset()\n}\n\nexport function getTextColor(el: HTMLElement) {\n    const backgroundColor = window.getComputedStyle(el).backgroundColor\n    if (backgroundColor === 'rgba(0, 0, 0, 0)') {\n        return 'black'\n    }\n    const colorMatch = backgroundColor.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/)\n    if (!colorMatch) return 'black'\n\n    const r = parseInt(colorMatch[1])\n    const g = parseInt(colorMatch[2])\n    const b = parseInt(colorMatch[3])\n    const hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b))\n    return hsp > 127.5 ? 'black' : 'white'\n}\n\nexport function setTextColors(parentEl: any) {\n    for (const el of parentEl.querySelectorAll('.auto-text-color')) {\n        el.style.color = getTextColor(el)\n    }\n}\n\nexport function showQuestion(n: number, surveyId: string) {\n    // This function will display the specified tab of the form...\n    const tabs = document\n        .getElementsByClassName(`PostHogSurvey${surveyId}`)[0]\n        ?.shadowRoot?.querySelectorAll('.tab') as NodeListOf<HTMLElement>\n    tabs[n].style.display = 'block'\n}\n\nexport function nextQuestion(currentQuestionIdx: number, surveyId: string) {\n    // figure out which tab to display\n    const tabs = document\n        ?.getElementsByClassName(`PostHogSurvey${surveyId}`)[0]\n        ?.shadowRoot?.querySelectorAll('.tab') as NodeListOf<HTMLElement>\n\n    tabs[currentQuestionIdx].style.display = 'none'\n    showQuestion(currentQuestionIdx + 1, surveyId)\n}\n\nexport const satisfiedEmoji =\n    '<svg class=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\"><path d=\"M626-533q22.5 0 38.25-15.75T680-587q0-22.5-15.75-38.25T626-641q-22.5 0-38.25 15.75T572-587q0 22.5 15.75 38.25T626-533Zm-292 0q22.5 0 38.25-15.75T388-587q0-22.5-15.75-38.25T334-641q-22.5 0-38.25 15.75T280-587q0 22.5 15.75 38.25T334-533Zm146 272q66 0 121.5-35.5T682-393h-52q-23 40-63 61.5T480.5-310q-46.5 0-87-21T331-393h-53q26 61 81 96.5T480-261Zm0 181q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\"/></svg>'\nexport const neutralEmoji =\n    '<svg class=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\"><path d=\"M626-533q22.5 0 38.25-15.75T680-587q0-22.5-15.75-38.25T626-641q-22.5 0-38.25 15.75T572-587q0 22.5 15.75 38.25T626-533Zm-292 0q22.5 0 38.25-15.75T388-587q0-22.5-15.75-38.25T334-641q-22.5 0-38.25 15.75T280-587q0 22.5 15.75 38.25T334-533Zm20 194h253v-49H354v49ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\"/></svg>'\nexport const dissatisfiedEmoji =\n    '<svg class=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\"><path d=\"M626-533q22.5 0 38.25-15.75T680-587q0-22.5-15.75-38.25T626-641q-22.5 0-38.25 15.75T572-587q0 22.5 15.75 38.25T626-533Zm-292 0q22.5 0 38.25-15.75T388-587q0-22.5-15.75-38.25T334-641q-22.5 0-38.25 15.75T280-587q0 22.5 15.75 38.25T334-533Zm146.174 116Q413-417 358.5-379.5T278-280h53q22-42 62.173-65t87.5-23Q528-368 567.5-344.5T630-280h52q-25-63-79.826-100-54.826-37-122-37ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\"/></svg>'\nexport const veryDissatisfiedEmoji =\n    '<svg class=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\"><path d=\"M480-417q-67 0-121.5 37.5T278-280h404q-25-63-80-100t-122-37Zm-183-72 50-45 45 45 31-36-45-45 45-45-31-36-45 45-50-45-31 36 45 45-45 45 31 36Zm272 0 44-45 51 45 31-36-45-45 45-45-31-36-51 45-44-45-31 36 44 45-44 45 31 36ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142 0 241-99t99-241q0-142-99-241t-241-99q-142 0-241 99t-99 241q0 142 99 241t241 99Z\"/></svg>'\nexport const verySatisfiedEmoji =\n    '<svg class=\"emoji-svg\" xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 -960 960 960\" width=\"48\"><path d=\"M479.504-261Q537-261 585.5-287q48.5-26 78.5-72.4 6-11.6-.75-22.6-6.75-11-20.25-11H316.918Q303-393 296.5-382t-.5 22.6q30 46.4 78.5 72.4 48.5 26 105.004 26ZM347-578l27 27q7.636 8 17.818 8Q402-543 410-551q8-8 8-18t-8-18l-42-42q-8.8-9-20.9-9-12.1 0-21.1 9l-42 42q-8 7.636-8 17.818Q276-559 284-551q8 8 18 8t18-8l27-27Zm267 0 27 27q7.714 8 18 8t18-8q8-7.636 8-17.818Q685-579 677-587l-42-42q-8.8-9-20.9-9-12.1 0-21.1 9l-42 42q-8 7.714-8 18t8 18q7.636 8 17.818 8Q579-543 587-551l27-27ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 340q142.375 0 241.188-98.812Q820-337.625 820-480t-98.812-241.188Q622.375-820 480-820t-241.188 98.812Q140-622.375 140-480t98.812 241.188Q337.625-140 480-140Z\"/></svg>'\nexport const cancelSVG =\n    '<svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0.164752 0.164752C0.384422 -0.0549175 0.740578 -0.0549175 0.960248 0.164752L6 5.20451L11.0398 0.164752C11.2594 -0.0549175 11.6156 -0.0549175 11.8352 0.164752C12.0549 0.384422 12.0549 0.740578 11.8352 0.960248L6.79549 6L11.8352 11.0398C12.0549 11.2594 12.0549 11.6156 11.8352 11.8352C11.6156 12.0549 11.2594 12.0549 11.0398 11.8352L6 6.79549L0.960248 11.8352C0.740578 12.0549 0.384422 12.0549 0.164752 11.8352C-0.0549175 11.6156 -0.0549175 11.2594 0.164752 11.0398L5.20451 6L0.164752 0.960248C-0.0549175 0.740578 -0.0549175 0.384422 0.164752 0.164752Z\" fill=\"black\"/></svg>'\nexport const posthogLogo =\n    '<svg width=\"77\" height=\"14\" viewBox=\"0 0 77 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0_2415_6911)\"><mask id=\"mask0_2415_6911\" style=\"mask-type:luminance\" maskUnits=\"userSpaceOnUse\" x=\"0\" y=\"0\" width=\"77\" height=\"14\"><path d=\"M0.5 0H76.5V14H0.5V0Z\" fill=\"white\"/></mask><g mask=\"url(#mask0_2415_6911)\"><path d=\"M5.77226 8.02931C5.59388 8.37329 5.08474 8.37329 4.90634 8.02931L4.4797 7.20672C4.41155 7.07535 4.41155 6.9207 4.4797 6.78933L4.90634 5.96669C5.08474 5.62276 5.59388 5.62276 5.77226 5.96669L6.19893 6.78933C6.26709 6.9207 6.26709 7.07535 6.19893 7.20672L5.77226 8.02931ZM5.77226 12.6946C5.59388 13.0386 5.08474 13.0386 4.90634 12.6946L4.4797 11.872C4.41155 11.7406 4.41155 11.586 4.4797 11.4546L4.90634 10.632C5.08474 10.288 5.59388 10.288 5.77226 10.632L6.19893 11.4546C6.26709 11.586 6.26709 11.7406 6.19893 11.872L5.77226 12.6946Z\" fill=\"#1D4AFF\"/><path d=\"M0.5 10.9238C0.5 10.508 1.02142 10.2998 1.32637 10.5938L3.54508 12.7327C3.85003 13.0267 3.63405 13.5294 3.20279 13.5294H0.984076C0.716728 13.5294 0.5 13.3205 0.5 13.0627V10.9238ZM0.5 8.67083C0.5 8.79459 0.551001 8.91331 0.641783 9.00081L5.19753 13.3927C5.28831 13.4802 5.41144 13.5294 5.53982 13.5294H8.0421C8.47337 13.5294 8.68936 13.0267 8.3844 12.7327L1.32637 5.92856C1.02142 5.63456 0.5 5.84278 0.5 6.25854V8.67083ZM0.5 4.00556C0.5 4.12932 0.551001 4.24802 0.641783 4.33554L10.0368 13.3927C10.1276 13.4802 10.2508 13.5294 10.3791 13.5294H12.8814C13.3127 13.5294 13.5287 13.0267 13.2237 12.7327L1.32637 1.26329C1.02142 0.969312 0.5 1.17752 0.5 1.59327V4.00556ZM5.33931 4.00556C5.33931 4.12932 5.39033 4.24802 5.4811 4.33554L14.1916 12.7327C14.4965 13.0267 15.0179 12.8185 15.0179 12.4028V9.99047C15.0179 9.86671 14.9669 9.74799 14.8762 9.66049L6.16568 1.26329C5.86071 0.969307 5.33931 1.17752 5.33931 1.59327V4.00556ZM11.005 1.26329C10.7 0.969307 10.1786 1.17752 10.1786 1.59327V4.00556C10.1786 4.12932 10.2296 4.24802 10.3204 4.33554L14.1916 8.06748C14.4965 8.36148 15.0179 8.15325 15.0179 7.7375V5.3252C15.0179 5.20144 14.9669 5.08272 14.8762 4.99522L11.005 1.26329Z\" fill=\"#F9BD2B\"/><path d=\"M21.0852 10.981L16.5288 6.58843C16.2238 6.29443 15.7024 6.50266 15.7024 6.91841V13.0627C15.7024 13.3205 15.9191 13.5294 16.1865 13.5294H23.2446C23.5119 13.5294 23.7287 13.3205 23.7287 13.0627V12.5032C23.7287 12.2455 23.511 12.0396 23.2459 12.0063C22.4323 11.9042 21.6713 11.546 21.0852 10.981ZM18.0252 12.0365C17.5978 12.0365 17.251 11.7021 17.251 11.2901C17.251 10.878 17.5978 10.5436 18.0252 10.5436C18.4527 10.5436 18.7996 10.878 18.7996 11.2901C18.7996 11.7021 18.4527 12.0365 18.0252 12.0365Z\" fill=\"currentColor\"/><path d=\"M0.5 13.0627C0.5 13.3205 0.716728 13.5294 0.984076 13.5294H3.20279C3.63405 13.5294 3.85003 13.0267 3.54508 12.7327L1.32637 10.5938C1.02142 10.2998 0.5 10.508 0.5 10.9238V13.0627ZM5.33931 5.13191L1.32637 1.26329C1.02142 0.969306 0.5 1.17752 0.5 1.59327V4.00556C0.5 4.12932 0.551001 4.24802 0.641783 4.33554L5.33931 8.86412V5.13191ZM1.32637 5.92855C1.02142 5.63455 0.5 5.84278 0.5 6.25853V8.67083C0.5 8.79459 0.551001 8.91331 0.641783 9.00081L5.33931 13.5294V9.79717L1.32637 5.92855Z\" fill=\"#1D4AFF\"/><path d=\"M10.1787 5.3252C10.1787 5.20144 10.1277 5.08272 10.0369 4.99522L6.16572 1.26329C5.8608 0.969306 5.33936 1.17752 5.33936 1.59327V4.00556C5.33936 4.12932 5.39037 4.24802 5.48114 4.33554L10.1787 8.86412V5.3252ZM5.33936 13.5294H8.04214C8.47341 13.5294 8.6894 13.0267 8.38443 12.7327L5.33936 9.79717V13.5294ZM5.33936 5.13191V8.67083C5.33936 8.79459 5.39037 8.91331 5.48114 9.00081L10.1787 13.5294V9.99047C10.1787 9.86671 10.1277 9.74803 10.0369 9.66049L5.33936 5.13191Z\" fill=\"#F54E00\"/><path d=\"M29.375 11.6667H31.3636V8.48772H33.0249C34.8499 8.48772 36.0204 7.4443 36.0204 5.83052C36.0204 4.21681 34.8499 3.17334 33.0249 3.17334H29.375V11.6667ZM31.3636 6.84972V4.81136H32.8236C33.5787 4.81136 34.0318 5.19958 34.0318 5.83052C34.0318 6.4615 33.5787 6.84972 32.8236 6.84972H31.3636ZM39.618 11.7637C41.5563 11.7637 42.9659 10.429 42.9659 8.60905C42.9659 6.78905 41.5563 5.45438 39.618 5.45438C37.6546 5.45438 36.2701 6.78905 36.2701 8.60905C36.2701 10.429 37.6546 11.7637 39.618 11.7637ZM38.1077 8.60905C38.1077 7.63838 38.7118 6.97105 39.618 6.97105C40.5116 6.97105 41.1157 7.63838 41.1157 8.60905C41.1157 9.57972 40.5116 10.2471 39.618 10.2471C38.7118 10.2471 38.1077 9.57972 38.1077 8.60905ZM46.1482 11.7637C47.6333 11.7637 48.6402 10.8658 48.6402 9.81025C48.6402 7.33505 45.2294 8.13585 45.2294 7.16518C45.2294 6.8983 45.5189 6.72843 45.9342 6.72843C46.3622 6.72843 46.8782 6.98318 47.0418 7.54132L48.527 6.94678C48.2375 6.06105 47.1677 5.45438 45.8713 5.45438C44.4743 5.45438 43.6058 6.25518 43.6058 7.21372C43.6058 9.53118 46.9663 8.88812 46.9663 9.84665C46.9663 10.1864 46.6391 10.417 46.1482 10.417C45.4434 10.417 44.9525 9.94376 44.8015 9.3735L43.3164 9.93158C43.6436 10.8537 44.6001 11.7637 46.1482 11.7637ZM53.4241 11.606L53.2982 10.0651C53.0843 10.1743 52.8074 10.2106 52.5808 10.2106C52.1278 10.2106 51.8257 9.89523 51.8257 9.34918V7.03172H53.3612V5.55145H51.8257V3.78001H49.9755V5.55145H48.9687V7.03172H49.9755V9.57972C49.9755 11.06 51.0202 11.7637 52.3921 11.7637C52.7696 11.7637 53.122 11.7031 53.4241 11.606ZM59.8749 3.17334V6.47358H56.376V3.17334H54.3874V11.6667H56.376V8.11158H59.8749V11.6667H61.8761V3.17334H59.8749ZM66.2899 11.7637C68.2281 11.7637 69.6378 10.429 69.6378 8.60905C69.6378 6.78905 68.2281 5.45438 66.2899 5.45438C64.3265 5.45438 62.942 6.78905 62.942 8.60905C62.942 10.429 64.3265 11.7637 66.2899 11.7637ZM64.7796 8.60905C64.7796 7.63838 65.3837 6.97105 66.2899 6.97105C67.1835 6.97105 67.7876 7.63838 67.7876 8.60905C67.7876 9.57972 67.1835 10.2471 66.2899 10.2471C65.3837 10.2471 64.7796 9.57972 64.7796 8.60905ZM73.2088 11.4725C73.901 11.4725 74.5177 11.242 74.845 10.8416V11.424C74.845 12.1034 74.2786 12.5767 73.4102 12.5767C72.7935 12.5767 72.2523 12.2854 72.1642 11.788L70.4776 12.0428C70.7042 13.1955 71.925 13.972 73.4102 13.972C75.361 13.972 76.6574 12.8679 76.6574 11.2298V5.55145H74.8324V6.07318C74.4926 5.69705 73.9136 5.45438 73.171 5.45438C71.409 5.45438 70.3014 6.61918 70.3014 8.46345C70.3014 10.3077 71.409 11.4725 73.2088 11.4725ZM72.1012 8.46345C72.1012 7.55345 72.655 6.97105 73.5109 6.97105C74.3793 6.97105 74.9331 7.55345 74.9331 8.46345C74.9331 9.37345 74.3793 9.95585 73.5109 9.95585C72.655 9.95585 72.1012 9.37345 72.1012 8.46345Z\" fill=\"currentColor\"/></g></g><defs><clipPath id=\"clip0_2415_6911\"><rect width=\"76\" height=\"14\" fill=\"white\" transform=\"translate(0.5)\"/></clipPath></defs></svg>'\nexport const checkSVG =\n    '<svg width=\"16\" height=\"12\" viewBox=\"0 0 16 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5.30769 10.6923L4.77736 11.2226C4.91801 11.3633 5.10878 11.4423 5.30769 11.4423C5.5066 11.4423 5.69737 11.3633 5.83802 11.2226L5.30769 10.6923ZM15.5303 1.53033C15.8232 1.23744 15.8232 0.762563 15.5303 0.46967C15.2374 0.176777 14.7626 0.176777 14.4697 0.46967L15.5303 1.53033ZM1.53033 5.85429C1.23744 5.56139 0.762563 5.56139 0.46967 5.85429C0.176777 6.14718 0.176777 6.62205 0.46967 6.91495L1.53033 5.85429ZM5.83802 11.2226L15.5303 1.53033L14.4697 0.46967L4.77736 10.162L5.83802 11.2226ZM0.46967 6.91495L4.77736 11.2226L5.83802 10.162L1.53033 5.85429L0.46967 6.91495Z\" fill=\"currentColor\"/></svg>'\n","import { PostHog } from '../posthog-core'\nimport { Survey } from '../posthog-surveys-types'\nimport { createMultipleQuestionSurvey, createSingleQuestionSurvey, setTextColors, style } from './surveys/surveys-utils'\nimport { document as _document } from '../utils/globals'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst document = _document as Document\n\nexport class SurveysWidget {\n    instance: PostHog\n    survey: Survey\n    shadow: any\n\n    constructor(instance: PostHog, survey: Survey) {\n        this.instance = instance\n        this.survey = survey\n        this.shadow = this.createWidgetShadow()\n    }\n\n    createWidget(): void {\n        const survey = this.createSurveyForWidget()\n        let widget\n        if (this.survey.appearance?.widgetType === 'selector') {\n            // user supplied button\n            widget = document.querySelector(this.survey.appearance.widgetSelector || '')\n        } else if (this.survey.appearance?.widgetType === 'tab') {\n            widget = this.createTabWidget()\n        } else if (this.survey.appearance?.widgetType === 'button') {\n            widget = this.createButtonWidget()\n        }\n        if (this.survey.appearance?.widgetType !== 'selector') {\n            this.shadow.appendChild(widget)\n        }\n        setTextColors(this.shadow)\n        // reposition survey next to widget when opened\n        if (survey && this.survey.appearance?.widgetType === 'tab' && widget) {\n            survey.style.bottom = 'auto'\n            survey.style.borderBottom = `1.5px solid ${this.survey.appearance?.borderColor || '#c9c6c6'}`\n            survey.style.borderRadius = '10px'\n            const widgetPos = widget.getBoundingClientRect()\n            survey.style.top = '50%'\n            survey.style.left = `${widgetPos.right - 360}px`\n        }\n        if (widget) {\n            widget.addEventListener('click', () => {\n                if (survey) {\n                    survey.style.display = survey.style.display === 'none' ? 'block' : 'none'\n                }\n            })\n            widget.setAttribute('PHWidgetSurveyClickListener', 'true')\n            survey?.addEventListener('PHSurveyClosed', () => (survey.style.display = 'none'))\n        }\n    }\n\n    createTabWidget(): HTMLDivElement {\n        // make a permanent tab widget\n        const tab = document.createElement('div')\n        const html = `\n            <div class=\"ph-survey-widget-tab auto-text-color\">\n                <div class=\"ph-survey-widget-tab-icon\">\n                </div>\n                ${this.survey.appearance?.widgetLabel || ''}\n            </div>\n            `\n\n        tab.innerHTML = html\n        return tab\n    }\n\n    createButtonWidget(): HTMLButtonElement {\n        // make a permanent button widget\n        const label = 'Feedback :)'\n        const button = document.createElement('button')\n        const html = `\n            <div class=\"ph-survey-widget-button auto-text-color\">\n                <div class=\"ph-survey-widget-button-icon\">\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                </div>\n                ${label}\n            </div>\n            `\n        button.innerHTML = html\n        return button\n    }\n\n    private createSurveyForWidget(): HTMLFormElement | null {\n        const surveyStyleSheet = style(this.survey.id, this.survey.appearance)\n        this.shadow.appendChild(Object.assign(document.createElement('style'), { innerText: surveyStyleSheet }))\n        const widgetSurvey =\n            this.survey.questions.length > 1\n                ? createMultipleQuestionSurvey(this.instance, this.survey)\n                : createSingleQuestionSurvey(this.instance, this.survey, this.survey.questions[0])\n        if (widgetSurvey) {\n            widgetSurvey.style.display = 'none'\n        }\n        this.shadow.appendChild(widgetSurvey)\n        // add survey cancel listener\n        widgetSurvey?.addEventListener('PHSurveyClosed', () => (widgetSurvey.style.display = 'none'))\n        return widgetSurvey as HTMLFormElement\n    }\n\n    private createWidgetShadow() {\n        const div = document.createElement('div')\n        div.className = `PostHogWidget${this.survey.id}`\n        const shadow = div.attachShadow({ mode: 'open' })\n        const widgetStyleSheet = `\n            .ph-survey-widget-tab {\n                position: fixed;\n                top: 50%;\n                right: 0;\n                background: ${this.survey.appearance?.widgetColor || '#e0a045'};\n                color: white;\n                transform: rotate(-90deg) translate(0, -100%);\n                transform-origin: right top;\n                min-width: 40px;\n                padding: 8px 12px;\n                font-weight: 500;\n                border-radius: 3px 3px 0 0;\n                text-align: center;\n                cursor: pointer;\n                z-index: 9999999;\n            }\n            .ph-survey-widget-tab:hover {\n                padding-bottom: 13px;\n            }\n            .ph-survey-widget-button {\n                position: fixed;\n            }\n        `\n        shadow.append(Object.assign(document.createElement('style'), { innerText: widgetStyleSheet }))\n        document.body.appendChild(div)\n        return shadow\n    }\n}\n","import { PostHog } from 'posthog-core'\nimport { Survey, SurveyType } from '../posthog-surveys-types'\nimport { SurveysWidget } from './surveys-widget'\n\nimport { window as _window, document as _document } from '../utils/globals'\nimport {\n    createMultipleQuestionSurvey,\n    createSingleQuestionSurvey,\n    showQuestion,\n    setTextColors,\n    cancelSVG,\n    closeSurveyPopup,\n    posthogLogo,\n    style,\n} from './surveys/surveys-utils'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst window = _window as Window & typeof globalThis\nconst document = _document as Document\n\nexport const createShadow = (styleSheet: string, surveyId: string) => {\n    const div = document.createElement('div')\n    div.className = `PostHogSurvey${surveyId}`\n    const shadow = div.attachShadow({ mode: 'open' })\n    if (styleSheet) {\n        const styleElement = Object.assign(document.createElement('style'), {\n            innerText: styleSheet,\n        })\n        shadow.appendChild(styleElement)\n    }\n    document.body.appendChild(div)\n    return shadow\n}\n\nexport const createThankYouMessage = (survey: Survey) => {\n    const thankYouHTML = `\n    <div class=\"thank-you-message-container\">\n        <div class=\"cancel-btn-wrapper\">\n            <button class=\"form-cancel\" type=\"cancel\">${cancelSVG}</button>\n        </div>\n        <h3 class=\"thank-you-message-header auto-text-color\">${\n            survey.appearance?.thankYouMessageHeader || 'Thank you!'\n        }</h3>\n        <div class=\"thank-you-message-body auto-text-color\">${survey.appearance?.thankYouMessageDescription || ''}</div>\n        <button class=\"form-submit auto-text-color\"><span>Close</span><span class=\"thank-you-message-countdown\"></span></button>\n        ${\n            survey.appearance?.whiteLabel\n                ? ''\n                : `<a href=\"https://posthog.com\" target=\"_blank\" rel=\"noopener\" class=\"footer-branding auto-text-color\">Survey by ${posthogLogo}</a>`\n        }\n    </div>\n    `\n    const thankYouElement = Object.assign(document.createElement('div'), {\n        className: `thank-you-message`,\n        innerHTML: thankYouHTML,\n    })\n    return thankYouElement\n}\n\nexport const addCancelListeners = (\n    posthog: PostHog,\n    surveyPopup: HTMLFormElement,\n    surveyId: string,\n    surveyEventName: string\n) => {\n    const cancelButtons = surveyPopup.getElementsByClassName('form-cancel')\n    for (const button of cancelButtons) {\n        button.addEventListener('click', (e) => {\n            e.preventDefault()\n            closeSurveyPopup(surveyId, surveyPopup)\n            posthog.capture('survey dismissed', {\n                $survey_name: surveyEventName,\n                $survey_id: surveyId,\n                sessionRecordingUrl: posthog.get_session_replay_url?.(),\n                $set: {\n                    [`$survey_dismissed/${surveyId}`]: true,\n                },\n            })\n        })\n    }\n    window.dispatchEvent(new Event('PHSurveyClosed'))\n}\n\nconst handleWidget = (posthog: PostHog, survey: Survey) => {\n    const posthogWidget = new SurveysWidget(posthog, survey)\n    posthogWidget.createWidget()\n}\n\nexport const callSurveys = (posthog: PostHog, forceReload: boolean = false) => {\n    posthog?.getActiveMatchingSurveys((surveys) => {\n        const nonAPISurveys = surveys.filter((survey) => survey.type !== 'api')\n        nonAPISurveys.forEach((survey) => {\n            if (survey.type === SurveyType.Widget) {\n                if (\n                    survey.appearance?.widgetType === 'tab' &&\n                    document.querySelectorAll(`.PostHogWidget${survey.id}`).length === 0\n                ) {\n                    handleWidget(posthog, survey)\n                }\n                if (survey.appearance?.widgetType === 'selector' && survey.appearance?.widgetSelector) {\n                    const selectorOnPage = document.querySelector(survey.appearance.widgetSelector)\n                    if (selectorOnPage) {\n                        if (document.querySelectorAll(`.PostHogWidget${survey.id}`).length === 0) {\n                            handleWidget(posthog, survey)\n                        } else if (document.querySelectorAll(`.PostHogWidget${survey.id}`).length === 1) {\n                            // we have to check if user selector already has a survey listener attached to it because we always have to check if it's on the page or not\n                            if (!selectorOnPage.getAttribute('PHWidgetSurveyClickListener')) {\n                                const surveyPopup = document\n                                    .querySelector(`.PostHogWidget${survey.id}`)\n                                    ?.shadowRoot?.querySelector(`.survey-${survey.id}-form`) as HTMLFormElement\n                                selectorOnPage.addEventListener('click', () => {\n                                    if (surveyPopup) {\n                                        surveyPopup.style.display =\n                                            surveyPopup.style.display === 'none' ? 'block' : 'none'\n                                        surveyPopup.addEventListener(\n                                            'PHSurveyClosed',\n                                            () => (surveyPopup.style.display = 'none')\n                                        )\n                                    }\n                                })\n                                selectorOnPage.setAttribute('PHWidgetSurveyClickListener', 'true')\n                            }\n                        }\n                    }\n                }\n            }\n            if (\n                survey.type === SurveyType.Popover &&\n                document.querySelectorAll(\"div[class^='PostHogSurvey']\").length === 0\n            ) {\n                const surveyWaitPeriodInDays = survey.conditions?.seenSurveyWaitPeriodInDays\n                const lastSeenSurveyDate = localStorage.getItem(`lastSeenSurveyDate`)\n                if (surveyWaitPeriodInDays && lastSeenSurveyDate) {\n                    const today = new Date()\n                    const diff = Math.abs(today.getTime() - new Date(lastSeenSurveyDate).getTime())\n                    const diffDaysFromToday = Math.ceil(diff / (1000 * 3600 * 24))\n                    if (diffDaysFromToday < surveyWaitPeriodInDays) {\n                        return\n                    }\n                }\n\n                if (!localStorage.getItem(`seenSurvey_${survey.id}`)) {\n                    const shadow = createShadow(style(survey.id, survey?.appearance), survey.id)\n                    let surveyPopup\n                    if (survey.questions.length < 2) {\n                        surveyPopup = createSingleQuestionSurvey(\n                            posthog,\n                            survey,\n                            survey.questions[0]\n                        ) as HTMLFormElement\n                    } else {\n                        surveyPopup = createMultipleQuestionSurvey(posthog, survey)\n                    }\n                    if (surveyPopup) {\n                        addCancelListeners(posthog, surveyPopup, survey.id, survey.name)\n                        if (survey.appearance?.whiteLabel) {\n                            const allBrandingElements = surveyPopup.getElementsByClassName('footer-branding')\n                            for (const brandingElement of allBrandingElements) {\n                                ;(brandingElement as HTMLAnchorElement).style.display = 'none'\n                            }\n                        }\n                        shadow.appendChild(surveyPopup)\n                    }\n                    if (survey.questions.length > 1) {\n                        const currentQuestion = 0\n                        showQuestion(currentQuestion, survey.id)\n                    }\n                    setTextColors(shadow)\n                    window.dispatchEvent(new Event('PHSurveyShown'))\n                    posthog.capture('survey shown', {\n                        $survey_name: survey.name,\n                        $survey_id: survey.id,\n                        sessionRecordingUrl: posthog.get_session_replay_url?.(),\n                    })\n                    localStorage.setItem(`lastSeenSurveyDate`, new Date().toISOString())\n                    if (survey.appearance?.displayThankYouMessage) {\n                        window.addEventListener('PHSurveySent', () => {\n                            const thankYouElement = createThankYouMessage(survey)\n                            shadow.appendChild(thankYouElement)\n                            const cancelButtons = thankYouElement.querySelectorAll('.form-cancel, .form-submit')\n                            for (const button of cancelButtons) {\n                                button.addEventListener('click', () => {\n                                    thankYouElement.remove()\n                                })\n                            }\n                            const countdownEl = thankYouElement.querySelector('.thank-you-message-countdown')\n                            if (survey.appearance?.autoDisappear && countdownEl) {\n                                let count = 3\n                                countdownEl.textContent = `(${count})`\n                                const countdown = setInterval(() => {\n                                    count -= 1\n                                    if (count <= 0) {\n                                        clearInterval(countdown)\n                                        thankYouElement.remove()\n                                        return\n                                    }\n                                    countdownEl.textContent = `(${count})`\n                                }, 1000)\n                            }\n                            setTextColors(shadow)\n                        })\n                    }\n                }\n            }\n        })\n    }, forceReload)\n}\n\n// This is the main exported function\nexport function generateSurveys(posthog: PostHog) {\n    // NOTE: Important to ensure we never try and run surveys without a window environment\n    if (!document || !window) {\n        return\n    }\n    callSurveys(posthog, true)\n\n    // recalculate surveys every 3 seconds to check if URL or selectors have changed\n    setInterval(() => {\n        callSurveys(posthog, false)\n    }, 3000)\n}\n","import { generateSurveys } from './extensions/surveys'\n\nimport { window } from './utils/globals'\n\nif (window) {\n    ;(window as any).extendPostHogWithSurveys = generateSurveys\n}\n\nexport default generateSurveys\n"],"names":["SurveyType","SurveyQuestionType","_isUndefined","x","win","window","undefined","navigator","document","userAgent","_window","_document","style","id","appearance","positions","left","right","center","concat","parseInt","maxWidth","zIndex","borderColor","position","backgroundColor","submitButtonColor","ratingButtonColor","ratingButtonActiveColor","createSingleQuestionSurvey","posthog","survey","question","questionType","type","createRatingsPopup","createOpenTextOrLinkPopup","createMultipleChoicePopup","createMultipleQuestionSurvey","questions","questionTypeMapping","open","link","rating","single_choice","multiple_choice","multipleQuestionForm","Object","assign","createElement","className","onsubmit","e","_posthog$get_session_","preventDefault","_step","multipleQuestionResponses","_iterator","_createForOfIteratorHelper","_toConsumableArray","target","getElementsByClassName","entries","s","n","done","_tab$querySelector","_step$value","_slicedToArray","value","index","tab","classList","response","querySelector","_tab$querySelector2","querySelectorAll","map","choice","optional","err","f","capture","_objectSpread","$survey_name","name","$survey_id","$survey_questions","sessionRecordingUrl","get_session_replay_url","$set","setTimeout","dispatchEvent","Event","closeSurveyPopup","idx","questionElement","questionTab","length","questionElementSubmitButton","innerText","buttonText","addEventListener","currentQuestionIdx","surveyId","_document$getElements3","_document$getElements4","shadowRoot","display","showQuestion","insertAdjacentElement","questionIndex","_survey$appearance","scale","starting","displayType","isOptional","ratingOptionsElement","gridTemplateColumns","i","buttonElement","innerHTML","append","threeEmojis","dissatisfiedEmoji","neutralEmoji","satisfiedEmoji","fiveEmojis","veryDissatisfiedEmoji","verySatisfiedEmoji","emojiElement","formElement","ratingsForm","cancelSVG","description","lowerBoundLabel","upperBoundLabel","submitButtonText","posthogLogo","_posthog$get_session_2","activeRatingEl","$survey_question","$survey_response","call","allElements","_loop","_allElements","_i2","ratingEl","_step2","_iterator2","remove","add","disabled","setTextColors","_survey$appearance2","_survey$appearance3","surveyQuestionType","surveyDescription","questionText","form","placeholder","_posthog$get_session_3","_survey$appearance4","surveyQuestion","surveyQuestionChoices","choices","isSingleChoice","hasOpenChoice","option","choiceClass","val","inputType","checkSVG","join","_targetElement$queryS","_posthog$get_session_4","targetElement","selectedChoices","_selectedChoices$leng","_step3","_iterator3","_loop2","openChoiceWrapper","textInput","checkInput","checked","focus","stopPropagation","surveyPopup","localStorage","setItem","reset","getTextColor","el","getComputedStyle","colorMatch","match","r","g","b","Math","sqrt","parentEl","_step4","_iterator4","color","_document$getElements","_document$getElements2","SurveysWidget","instance","_classCallCheck","this","shadow","createWidgetShadow","key","_this$survey$appearan","_this$survey$appearan2","_this$survey$appearan3","_this$survey$appearan4","_this$survey$appearan5","widget","createSurveyForWidget","widgetType","widgetSelector","createTabWidget","createButtonWidget","appendChild","_this$survey$appearan6","bottom","borderBottom","borderRadius","widgetPos","getBoundingClientRect","top","setAttribute","_this$survey$appearan7","html","widgetLabel","button","label","surveyStyleSheet","widgetSurvey","_this$survey$appearan8","div","attachShadow","mode","widgetStyleSheet","widgetColor","body","createShadow","styleSheet","styleElement","createThankYouMessage","thankYouHTML","thankYouMessageHeader","thankYouMessageDescription","whiteLabel","addCancelListeners","surveyEventName","_defineProperty","handleWidget","createWidget","callSurveys","forceReload","getActiveMatchingSurveys","surveys","filter","forEach","_survey$appearance5","_survey$appearance6","Widget","selectorOnPage","getAttribute","_document$querySelect","_document$querySelect2","Popover","_survey$conditions","surveyWaitPeriodInDays","conditions","seenSurveyWaitPeriodInDays","lastSeenSurveyDate","getItem","today","Date","diff","abs","getTime","ceil","_survey$appearance8","_survey$appearance7","toISOString","displayThankYouMessage","_survey$appearance9","thankYouElement","countdownEl","autoDisappear","count","textContent","countdown","setInterval","clearInterval","generateSurveys","extendPostHogWithSurveys"],"mappings":"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"}