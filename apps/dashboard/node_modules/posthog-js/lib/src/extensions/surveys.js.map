{"version":3,"file":"surveys.js","sourceRoot":"","sources":["../../../src/extensions/surveys.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from 'posthog-core'\nimport { Survey, SurveyType } from '../posthog-surveys-types'\nimport { SurveysWidget } from './surveys-widget'\n\nimport { window as _window, document as _document } from '../utils/globals'\nimport {\n    createMultipleQuestionSurvey,\n    createSingleQuestionSurvey,\n    showQuestion,\n    setTextColors,\n    cancelSVG,\n    closeSurveyPopup,\n    posthogLogo,\n    style,\n} from './surveys/surveys-utils'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst window = _window as Window & typeof globalThis\nconst document = _document as Document\n\nexport const createShadow = (styleSheet: string, surveyId: string) => {\n    const div = document.createElement('div')\n    div.className = `PostHogSurvey${surveyId}`\n    const shadow = div.attachShadow({ mode: 'open' })\n    if (styleSheet) {\n        const styleElement = Object.assign(document.createElement('style'), {\n            innerText: styleSheet,\n        })\n        shadow.appendChild(styleElement)\n    }\n    document.body.appendChild(div)\n    return shadow\n}\n\nexport const createThankYouMessage = (survey: Survey) => {\n    const thankYouHTML = `\n    <div class=\"thank-you-message-container\">\n        <div class=\"cancel-btn-wrapper\">\n            <button class=\"form-cancel\" type=\"cancel\">${cancelSVG}</button>\n        </div>\n        <h3 class=\"thank-you-message-header auto-text-color\">${\n            survey.appearance?.thankYouMessageHeader || 'Thank you!'\n        }</h3>\n        <div class=\"thank-you-message-body auto-text-color\">${survey.appearance?.thankYouMessageDescription || ''}</div>\n        <button class=\"form-submit auto-text-color\"><span>Close</span><span class=\"thank-you-message-countdown\"></span></button>\n        ${\n            survey.appearance?.whiteLabel\n                ? ''\n                : `<a href=\"https://posthog.com\" target=\"_blank\" rel=\"noopener\" class=\"footer-branding auto-text-color\">Survey by ${posthogLogo}</a>`\n        }\n    </div>\n    `\n    const thankYouElement = Object.assign(document.createElement('div'), {\n        className: `thank-you-message`,\n        innerHTML: thankYouHTML,\n    })\n    return thankYouElement\n}\n\nexport const addCancelListeners = (\n    posthog: PostHog,\n    surveyPopup: HTMLFormElement,\n    surveyId: string,\n    surveyEventName: string\n) => {\n    const cancelButtons = surveyPopup.getElementsByClassName('form-cancel')\n    for (const button of cancelButtons) {\n        button.addEventListener('click', (e) => {\n            e.preventDefault()\n            closeSurveyPopup(surveyId, surveyPopup)\n            posthog.capture('survey dismissed', {\n                $survey_name: surveyEventName,\n                $survey_id: surveyId,\n                sessionRecordingUrl: posthog.get_session_replay_url?.(),\n                $set: {\n                    [`$survey_dismissed/${surveyId}`]: true,\n                },\n            })\n        })\n    }\n    window.dispatchEvent(new Event('PHSurveyClosed'))\n}\n\nconst handleWidget = (posthog: PostHog, survey: Survey) => {\n    const posthogWidget = new SurveysWidget(posthog, survey)\n    posthogWidget.createWidget()\n}\n\nexport const callSurveys = (posthog: PostHog, forceReload: boolean = false) => {\n    posthog?.getActiveMatchingSurveys((surveys) => {\n        const nonAPISurveys = surveys.filter((survey) => survey.type !== 'api')\n        nonAPISurveys.forEach((survey) => {\n            if (survey.type === SurveyType.Widget) {\n                if (\n                    survey.appearance?.widgetType === 'tab' &&\n                    document.querySelectorAll(`.PostHogWidget${survey.id}`).length === 0\n                ) {\n                    handleWidget(posthog, survey)\n                }\n                if (survey.appearance?.widgetType === 'selector' && survey.appearance?.widgetSelector) {\n                    const selectorOnPage = document.querySelector(survey.appearance.widgetSelector)\n                    if (selectorOnPage) {\n                        if (document.querySelectorAll(`.PostHogWidget${survey.id}`).length === 0) {\n                            handleWidget(posthog, survey)\n                        } else if (document.querySelectorAll(`.PostHogWidget${survey.id}`).length === 1) {\n                            // we have to check if user selector already has a survey listener attached to it because we always have to check if it's on the page or not\n                            if (!selectorOnPage.getAttribute('PHWidgetSurveyClickListener')) {\n                                const surveyPopup = document\n                                    .querySelector(`.PostHogWidget${survey.id}`)\n                                    ?.shadowRoot?.querySelector(`.survey-${survey.id}-form`) as HTMLFormElement\n                                selectorOnPage.addEventListener('click', () => {\n                                    if (surveyPopup) {\n                                        surveyPopup.style.display =\n                                            surveyPopup.style.display === 'none' ? 'block' : 'none'\n                                        surveyPopup.addEventListener(\n                                            'PHSurveyClosed',\n                                            () => (surveyPopup.style.display = 'none')\n                                        )\n                                    }\n                                })\n                                selectorOnPage.setAttribute('PHWidgetSurveyClickListener', 'true')\n                            }\n                        }\n                    }\n                }\n            }\n            if (\n                survey.type === SurveyType.Popover &&\n                document.querySelectorAll(\"div[class^='PostHogSurvey']\").length === 0\n            ) {\n                const surveyWaitPeriodInDays = survey.conditions?.seenSurveyWaitPeriodInDays\n                const lastSeenSurveyDate = localStorage.getItem(`lastSeenSurveyDate`)\n                if (surveyWaitPeriodInDays && lastSeenSurveyDate) {\n                    const today = new Date()\n                    const diff = Math.abs(today.getTime() - new Date(lastSeenSurveyDate).getTime())\n                    const diffDaysFromToday = Math.ceil(diff / (1000 * 3600 * 24))\n                    if (diffDaysFromToday < surveyWaitPeriodInDays) {\n                        return\n                    }\n                }\n\n                if (!localStorage.getItem(`seenSurvey_${survey.id}`)) {\n                    const shadow = createShadow(style(survey.id, survey?.appearance), survey.id)\n                    let surveyPopup\n                    if (survey.questions.length < 2) {\n                        surveyPopup = createSingleQuestionSurvey(\n                            posthog,\n                            survey,\n                            survey.questions[0]\n                        ) as HTMLFormElement\n                    } else {\n                        surveyPopup = createMultipleQuestionSurvey(posthog, survey)\n                    }\n                    if (surveyPopup) {\n                        addCancelListeners(posthog, surveyPopup, survey.id, survey.name)\n                        if (survey.appearance?.whiteLabel) {\n                            const allBrandingElements = surveyPopup.getElementsByClassName('footer-branding')\n                            for (const brandingElement of allBrandingElements) {\n                                ;(brandingElement as HTMLAnchorElement).style.display = 'none'\n                            }\n                        }\n                        shadow.appendChild(surveyPopup)\n                    }\n                    if (survey.questions.length > 1) {\n                        const currentQuestion = 0\n                        showQuestion(currentQuestion, survey.id)\n                    }\n                    setTextColors(shadow)\n                    window.dispatchEvent(new Event('PHSurveyShown'))\n                    posthog.capture('survey shown', {\n                        $survey_name: survey.name,\n                        $survey_id: survey.id,\n                        sessionRecordingUrl: posthog.get_session_replay_url?.(),\n                    })\n                    localStorage.setItem(`lastSeenSurveyDate`, new Date().toISOString())\n                    if (survey.appearance?.displayThankYouMessage) {\n                        window.addEventListener('PHSurveySent', () => {\n                            const thankYouElement = createThankYouMessage(survey)\n                            shadow.appendChild(thankYouElement)\n                            const cancelButtons = thankYouElement.querySelectorAll('.form-cancel, .form-submit')\n                            for (const button of cancelButtons) {\n                                button.addEventListener('click', () => {\n                                    thankYouElement.remove()\n                                })\n                            }\n                            const countdownEl = thankYouElement.querySelector('.thank-you-message-countdown')\n                            if (survey.appearance?.autoDisappear && countdownEl) {\n                                let count = 3\n                                countdownEl.textContent = `(${count})`\n                                const countdown = setInterval(() => {\n                                    count -= 1\n                                    if (count <= 0) {\n                                        clearInterval(countdown)\n                                        thankYouElement.remove()\n                                        return\n                                    }\n                                    countdownEl.textContent = `(${count})`\n                                }, 1000)\n                            }\n                            setTextColors(shadow)\n                        })\n                    }\n                }\n            }\n        })\n    }, forceReload)\n}\n\n// This is the main exported function\nexport function generateSurveys(posthog: PostHog) {\n    // NOTE: Important to ensure we never try and run surveys without a window environment\n    if (!document || !window) {\n        return\n    }\n    callSurveys(posthog, true)\n\n    // recalculate surveys every 3 seconds to check if URL or selectors have changed\n    setInterval(() => {\n        callSurveys(posthog, false)\n    }, 3000)\n}\n"]}