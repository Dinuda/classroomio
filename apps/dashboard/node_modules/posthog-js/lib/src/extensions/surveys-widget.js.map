{"version":3,"file":"surveys-widget.js","sourceRoot":"","sources":["../../../src/extensions/surveys-widget.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from '../posthog-core'\nimport { Survey } from '../posthog-surveys-types'\nimport { createMultipleQuestionSurvey, createSingleQuestionSurvey, setTextColors, style } from './surveys/surveys-utils'\nimport { document as _document } from '../utils/globals'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst document = _document as Document\n\nexport class SurveysWidget {\n    instance: PostHog\n    survey: Survey\n    shadow: any\n\n    constructor(instance: PostHog, survey: Survey) {\n        this.instance = instance\n        this.survey = survey\n        this.shadow = this.createWidgetShadow()\n    }\n\n    createWidget(): void {\n        const survey = this.createSurveyForWidget()\n        let widget\n        if (this.survey.appearance?.widgetType === 'selector') {\n            // user supplied button\n            widget = document.querySelector(this.survey.appearance.widgetSelector || '')\n        } else if (this.survey.appearance?.widgetType === 'tab') {\n            widget = this.createTabWidget()\n        } else if (this.survey.appearance?.widgetType === 'button') {\n            widget = this.createButtonWidget()\n        }\n        if (this.survey.appearance?.widgetType !== 'selector') {\n            this.shadow.appendChild(widget)\n        }\n        setTextColors(this.shadow)\n        // reposition survey next to widget when opened\n        if (survey && this.survey.appearance?.widgetType === 'tab' && widget) {\n            survey.style.bottom = 'auto'\n            survey.style.borderBottom = `1.5px solid ${this.survey.appearance?.borderColor || '#c9c6c6'}`\n            survey.style.borderRadius = '10px'\n            const widgetPos = widget.getBoundingClientRect()\n            survey.style.top = '50%'\n            survey.style.left = `${widgetPos.right - 360}px`\n        }\n        if (widget) {\n            widget.addEventListener('click', () => {\n                if (survey) {\n                    survey.style.display = survey.style.display === 'none' ? 'block' : 'none'\n                }\n            })\n            widget.setAttribute('PHWidgetSurveyClickListener', 'true')\n            survey?.addEventListener('PHSurveyClosed', () => (survey.style.display = 'none'))\n        }\n    }\n\n    createTabWidget(): HTMLDivElement {\n        // make a permanent tab widget\n        const tab = document.createElement('div')\n        const html = `\n            <div class=\"ph-survey-widget-tab auto-text-color\">\n                <div class=\"ph-survey-widget-tab-icon\">\n                </div>\n                ${this.survey.appearance?.widgetLabel || ''}\n            </div>\n            `\n\n        tab.innerHTML = html\n        return tab\n    }\n\n    createButtonWidget(): HTMLButtonElement {\n        // make a permanent button widget\n        const label = 'Feedback :)'\n        const button = document.createElement('button')\n        const html = `\n            <div class=\"ph-survey-widget-button auto-text-color\">\n                <div class=\"ph-survey-widget-button-icon\">\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                </div>\n                ${label}\n            </div>\n            `\n        button.innerHTML = html\n        return button\n    }\n\n    private createSurveyForWidget(): HTMLFormElement | null {\n        const surveyStyleSheet = style(this.survey.id, this.survey.appearance)\n        this.shadow.appendChild(Object.assign(document.createElement('style'), { innerText: surveyStyleSheet }))\n        const widgetSurvey =\n            this.survey.questions.length > 1\n                ? createMultipleQuestionSurvey(this.instance, this.survey)\n                : createSingleQuestionSurvey(this.instance, this.survey, this.survey.questions[0])\n        if (widgetSurvey) {\n            widgetSurvey.style.display = 'none'\n        }\n        this.shadow.appendChild(widgetSurvey)\n        // add survey cancel listener\n        widgetSurvey?.addEventListener('PHSurveyClosed', () => (widgetSurvey.style.display = 'none'))\n        return widgetSurvey as HTMLFormElement\n    }\n\n    private createWidgetShadow() {\n        const div = document.createElement('div')\n        div.className = `PostHogWidget${this.survey.id}`\n        const shadow = div.attachShadow({ mode: 'open' })\n        const widgetStyleSheet = `\n            .ph-survey-widget-tab {\n                position: fixed;\n                top: 50%;\n                right: 0;\n                background: ${this.survey.appearance?.widgetColor || '#e0a045'};\n                color: white;\n                transform: rotate(-90deg) translate(0, -100%);\n                transform-origin: right top;\n                min-width: 40px;\n                padding: 8px 12px;\n                font-weight: 500;\n                border-radius: 3px 3px 0 0;\n                text-align: center;\n                cursor: pointer;\n                z-index: 9999999;\n            }\n            .ph-survey-widget-tab:hover {\n                padding-bottom: 13px;\n            }\n            .ph-survey-widget-button {\n                position: fixed;\n            }\n        `\n        shadow.append(Object.assign(document.createElement('style'), { innerText: widgetStyleSheet }))\n        document.body.appendChild(div)\n        return shadow\n    }\n}\n"]}