var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { SurveyType } from '../posthog-surveys-types';
import { SurveysWidget } from './surveys-widget';
import { window as _window, document as _document } from '../utils/globals';
import { createMultipleQuestionSurvey, createSingleQuestionSurvey, showQuestion, setTextColors, cancelSVG, closeSurveyPopup, posthogLogo, style, } from './surveys/surveys-utils';
// We cast the types here which is dangerous but protected by the top level generateSurveys call
var window = _window;
var document = _document;
export var createShadow = function (styleSheet, surveyId) {
    var div = document.createElement('div');
    div.className = "PostHogSurvey".concat(surveyId);
    var shadow = div.attachShadow({ mode: 'open' });
    if (styleSheet) {
        var styleElement = Object.assign(document.createElement('style'), {
            innerText: styleSheet,
        });
        shadow.appendChild(styleElement);
    }
    document.body.appendChild(div);
    return shadow;
};
export var createThankYouMessage = function (survey) {
    var _a, _b, _c;
    var thankYouHTML = "\n    <div class=\"thank-you-message-container\">\n        <div class=\"cancel-btn-wrapper\">\n            <button class=\"form-cancel\" type=\"cancel\">".concat(cancelSVG, "</button>\n        </div>\n        <h3 class=\"thank-you-message-header auto-text-color\">").concat(((_a = survey.appearance) === null || _a === void 0 ? void 0 : _a.thankYouMessageHeader) || 'Thank you!', "</h3>\n        <div class=\"thank-you-message-body auto-text-color\">").concat(((_b = survey.appearance) === null || _b === void 0 ? void 0 : _b.thankYouMessageDescription) || '', "</div>\n        <button class=\"form-submit auto-text-color\"><span>Close</span><span class=\"thank-you-message-countdown\"></span></button>\n        ").concat(((_c = survey.appearance) === null || _c === void 0 ? void 0 : _c.whiteLabel)
        ? ''
        : "<a href=\"https://posthog.com\" target=\"_blank\" rel=\"noopener\" class=\"footer-branding auto-text-color\">Survey by ".concat(posthogLogo, "</a>"), "\n    </div>\n    ");
    var thankYouElement = Object.assign(document.createElement('div'), {
        className: "thank-you-message",
        innerHTML: thankYouHTML,
    });
    return thankYouElement;
};
export var addCancelListeners = function (posthog, surveyPopup, surveyId, surveyEventName) {
    var e_1, _a;
    var cancelButtons = surveyPopup.getElementsByClassName('form-cancel');
    try {
        for (var cancelButtons_1 = __values(cancelButtons), cancelButtons_1_1 = cancelButtons_1.next(); !cancelButtons_1_1.done; cancelButtons_1_1 = cancelButtons_1.next()) {
            var button = cancelButtons_1_1.value;
            button.addEventListener('click', function (e) {
                var _a;
                var _b;
                e.preventDefault();
                closeSurveyPopup(surveyId, surveyPopup);
                posthog.capture('survey dismissed', {
                    $survey_name: surveyEventName,
                    $survey_id: surveyId,
                    sessionRecordingUrl: (_b = posthog.get_session_replay_url) === null || _b === void 0 ? void 0 : _b.call(posthog),
                    $set: (_a = {},
                        _a["$survey_dismissed/".concat(surveyId)] = true,
                        _a),
                });
            });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (cancelButtons_1_1 && !cancelButtons_1_1.done && (_a = cancelButtons_1.return)) _a.call(cancelButtons_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    window.dispatchEvent(new Event('PHSurveyClosed'));
};
var handleWidget = function (posthog, survey) {
    var posthogWidget = new SurveysWidget(posthog, survey);
    posthogWidget.createWidget();
};
export var callSurveys = function (posthog, forceReload) {
    if (forceReload === void 0) { forceReload = false; }
    posthog === null || posthog === void 0 ? void 0 : posthog.getActiveMatchingSurveys(function (surveys) {
        var nonAPISurveys = surveys.filter(function (survey) { return survey.type !== 'api'; });
        nonAPISurveys.forEach(function (survey) {
            var e_2, _a;
            var _b, _c, _d, _e, _f, _g, _h, _j, _k;
            if (survey.type === SurveyType.Widget) {
                if (((_b = survey.appearance) === null || _b === void 0 ? void 0 : _b.widgetType) === 'tab' &&
                    document.querySelectorAll(".PostHogWidget".concat(survey.id)).length === 0) {
                    handleWidget(posthog, survey);
                }
                if (((_c = survey.appearance) === null || _c === void 0 ? void 0 : _c.widgetType) === 'selector' && ((_d = survey.appearance) === null || _d === void 0 ? void 0 : _d.widgetSelector)) {
                    var selectorOnPage = document.querySelector(survey.appearance.widgetSelector);
                    if (selectorOnPage) {
                        if (document.querySelectorAll(".PostHogWidget".concat(survey.id)).length === 0) {
                            handleWidget(posthog, survey);
                        }
                        else if (document.querySelectorAll(".PostHogWidget".concat(survey.id)).length === 1) {
                            // we have to check if user selector already has a survey listener attached to it because we always have to check if it's on the page or not
                            if (!selectorOnPage.getAttribute('PHWidgetSurveyClickListener')) {
                                var surveyPopup_1 = (_f = (_e = document
                                    .querySelector(".PostHogWidget".concat(survey.id))) === null || _e === void 0 ? void 0 : _e.shadowRoot) === null || _f === void 0 ? void 0 : _f.querySelector(".survey-".concat(survey.id, "-form"));
                                selectorOnPage.addEventListener('click', function () {
                                    if (surveyPopup_1) {
                                        surveyPopup_1.style.display =
                                            surveyPopup_1.style.display === 'none' ? 'block' : 'none';
                                        surveyPopup_1.addEventListener('PHSurveyClosed', function () { return (surveyPopup_1.style.display = 'none'); });
                                    }
                                });
                                selectorOnPage.setAttribute('PHWidgetSurveyClickListener', 'true');
                            }
                        }
                    }
                }
            }
            if (survey.type === SurveyType.Popover &&
                document.querySelectorAll("div[class^='PostHogSurvey']").length === 0) {
                var surveyWaitPeriodInDays = (_g = survey.conditions) === null || _g === void 0 ? void 0 : _g.seenSurveyWaitPeriodInDays;
                var lastSeenSurveyDate = localStorage.getItem("lastSeenSurveyDate");
                if (surveyWaitPeriodInDays && lastSeenSurveyDate) {
                    var today = new Date();
                    var diff = Math.abs(today.getTime() - new Date(lastSeenSurveyDate).getTime());
                    var diffDaysFromToday = Math.ceil(diff / (1000 * 3600 * 24));
                    if (diffDaysFromToday < surveyWaitPeriodInDays) {
                        return;
                    }
                }
                if (!localStorage.getItem("seenSurvey_".concat(survey.id))) {
                    var shadow_1 = createShadow(style(survey.id, survey === null || survey === void 0 ? void 0 : survey.appearance), survey.id);
                    var surveyPopup = void 0;
                    if (survey.questions.length < 2) {
                        surveyPopup = createSingleQuestionSurvey(posthog, survey, survey.questions[0]);
                    }
                    else {
                        surveyPopup = createMultipleQuestionSurvey(posthog, survey);
                    }
                    if (surveyPopup) {
                        addCancelListeners(posthog, surveyPopup, survey.id, survey.name);
                        if ((_h = survey.appearance) === null || _h === void 0 ? void 0 : _h.whiteLabel) {
                            var allBrandingElements = surveyPopup.getElementsByClassName('footer-branding');
                            try {
                                for (var allBrandingElements_1 = __values(allBrandingElements), allBrandingElements_1_1 = allBrandingElements_1.next(); !allBrandingElements_1_1.done; allBrandingElements_1_1 = allBrandingElements_1.next()) {
                                    var brandingElement = allBrandingElements_1_1.value;
                                    ;
                                    brandingElement.style.display = 'none';
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (allBrandingElements_1_1 && !allBrandingElements_1_1.done && (_a = allBrandingElements_1.return)) _a.call(allBrandingElements_1);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                        shadow_1.appendChild(surveyPopup);
                    }
                    if (survey.questions.length > 1) {
                        var currentQuestion = 0;
                        showQuestion(currentQuestion, survey.id);
                    }
                    setTextColors(shadow_1);
                    window.dispatchEvent(new Event('PHSurveyShown'));
                    posthog.capture('survey shown', {
                        $survey_name: survey.name,
                        $survey_id: survey.id,
                        sessionRecordingUrl: (_j = posthog.get_session_replay_url) === null || _j === void 0 ? void 0 : _j.call(posthog),
                    });
                    localStorage.setItem("lastSeenSurveyDate", new Date().toISOString());
                    if ((_k = survey.appearance) === null || _k === void 0 ? void 0 : _k.displayThankYouMessage) {
                        window.addEventListener('PHSurveySent', function () {
                            var e_3, _a;
                            var _b;
                            var thankYouElement = createThankYouMessage(survey);
                            shadow_1.appendChild(thankYouElement);
                            var cancelButtons = thankYouElement.querySelectorAll('.form-cancel, .form-submit');
                            try {
                                for (var cancelButtons_2 = __values(cancelButtons), cancelButtons_2_1 = cancelButtons_2.next(); !cancelButtons_2_1.done; cancelButtons_2_1 = cancelButtons_2.next()) {
                                    var button = cancelButtons_2_1.value;
                                    button.addEventListener('click', function () {
                                        thankYouElement.remove();
                                    });
                                }
                            }
                            catch (e_3_1) { e_3 = { error: e_3_1 }; }
                            finally {
                                try {
                                    if (cancelButtons_2_1 && !cancelButtons_2_1.done && (_a = cancelButtons_2.return)) _a.call(cancelButtons_2);
                                }
                                finally { if (e_3) throw e_3.error; }
                            }
                            var countdownEl = thankYouElement.querySelector('.thank-you-message-countdown');
                            if (((_b = survey.appearance) === null || _b === void 0 ? void 0 : _b.autoDisappear) && countdownEl) {
                                var count_1 = 3;
                                countdownEl.textContent = "(".concat(count_1, ")");
                                var countdown_1 = setInterval(function () {
                                    count_1 -= 1;
                                    if (count_1 <= 0) {
                                        clearInterval(countdown_1);
                                        thankYouElement.remove();
                                        return;
                                    }
                                    countdownEl.textContent = "(".concat(count_1, ")");
                                }, 1000);
                            }
                            setTextColors(shadow_1);
                        });
                    }
                }
            }
        });
    }, forceReload);
};
// This is the main exported function
export function generateSurveys(posthog) {
    // NOTE: Important to ensure we never try and run surveys without a window environment
    if (!document || !window) {
        return;
    }
    callSurveys(posthog, true);
    // recalculate surveys every 3 seconds to check if URL or selectors have changed
    setInterval(function () {
        callSurveys(posthog, false);
    }, 3000);
}
//# sourceMappingURL=surveys.js.map