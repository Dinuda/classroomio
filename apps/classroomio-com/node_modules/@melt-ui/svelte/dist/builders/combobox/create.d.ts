/// <reference types="svelte" />
import type { MeltActionReturn } from '../../internal/types.js';
import { type Readable, type Writable } from 'svelte/store';
import type { ComboboxEvents } from './events.js';
import type { ComboboxItemProps, ComboboxOption, CreateComboboxProps } from './types.js';
export declare const INTERACTION_KEYS: string[];
/**
 * Creates an ARIA-1.2-compliant combobox.
 *
 * @TODO expose a nice mechanism for clearing the input.
 * @TODO would it be useful to have a callback for when an item is selected?
 * @TODO multi-select using `tags-input` builder?
 */
export declare function createCombobox<Value>(props?: CreateComboboxProps<Value>): {
    elements: {
        input: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        }, Writable<HTMLElement | null>, {
            debouncedSet: (value: string) => void;
            debouncedUpdate: (fn: (value: string) => string) => void;
            set: (value: string) => void;
            update: (fn: (value: string) => string) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<{
                value: string;
                debounced: string;
            }>, invalidate?: import("svelte/store").Invalidator<{
                value: string;
                debounced: string;
            }> | undefined): import("svelte/store").Unsubscriber;
        }], (node: HTMLInputElement) => MeltActionReturn<ComboboxEvents['input']>, ([$open, $highlightedItem, $inputValue]: [boolean, HTMLElement | null, {
            value: string;
            debounced: string;
        }]) => {
            readonly 'aria-activedescendant': string | undefined;
            readonly 'aria-autocomplete': "list";
            readonly 'aria-controls': string;
            readonly 'aria-expanded': boolean;
            readonly 'aria-labelledby': string;
            readonly 'data-melt-id': string;
            readonly autocomplete: "off";
            readonly id: string;
            readonly role: "combobox";
            readonly value: string;
        }, string>;
        option: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<ComboboxOption<Value> | undefined>, sideEffect?: ((newValue: ComboboxOption<Value> | undefined) => void) | undefined) => void;
            set: (this: void, value: ComboboxOption<Value> | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<ComboboxOption<Value> | undefined>, invalidate?: import("svelte/store").Invalidator<ComboboxOption<Value> | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, Writable<import("./types.js").ComboboxFilterFunction<Value>>, {
            debouncedSet: (value: string) => void;
            debouncedUpdate: (fn: (value: string) => string) => void;
            set: (value: string) => void;
            update: (fn: (value: string) => string) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<{
                value: string;
                debounced: string;
            }>, invalidate?: import("svelte/store").Invalidator<{
                value: string;
                debounced: string;
            }> | undefined): import("svelte/store").Unsubscriber;
        }, {
            debouncedSet: (value: boolean) => void;
            debouncedUpdate: (fn: (value: boolean) => boolean) => void;
            set: (value: boolean) => void;
            update: (fn: (value: boolean) => boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<{
                value: boolean;
                debounced: boolean;
            }>, invalidate?: import("svelte/store").Invalidator<{
                value: boolean;
                debounced: boolean;
            }> | undefined): import("svelte/store").Unsubscriber;
        }], (node: HTMLElement) => MeltActionReturn<ComboboxEvents['item']>, ([$value, $filterFunction, $inputValue, $touchedInput]: [ComboboxOption<Value> | undefined, import("./types.js").ComboboxFilterFunction<Value>, {
            value: string;
            debounced: string;
        }, {
            value: boolean;
            debounced: boolean;
        }]) => (props: ComboboxItemProps<Value>) => {
            readonly 'data-value': string;
            readonly 'data-label': string | undefined;
            readonly 'data-disabled': "" | undefined;
            readonly 'aria-disabled': true | undefined;
            readonly 'aria-selected': boolean;
            readonly 'data-selected': "" | undefined;
            readonly hidden: true | undefined;
            readonly 'data-hidden': "" | undefined;
            readonly id: string;
            readonly role: "option";
            readonly style: string;
        }, string>;
        menu: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[Readable<boolean>], (node: HTMLElement) => MeltActionReturn<ComboboxEvents['menu']>, ([$isVisible]: [boolean]) => {
            readonly hidden: true | undefined;
            readonly id: string;
            readonly role: "listbox";
            readonly style: string;
        }, string>;
        label: import("../../internal/helpers/index.js").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, (node: HTMLElement) => MeltActionReturn<"mousedown">, () => {
            id: string;
            for: string;
        }, string>;
    };
    states: {
        open: {
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        };
        selected: {
            update: (updater: import("svelte/store").Updater<ComboboxOption<Value> | undefined>, sideEffect?: ((newValue: ComboboxOption<Value> | undefined) => void) | undefined) => void;
            set: (this: void, value: ComboboxOption<Value> | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<ComboboxOption<Value> | undefined>, invalidate?: import("svelte/store").Invalidator<ComboboxOption<Value> | undefined> | undefined): import("svelte/store").Unsubscriber;
        };
        highlighted: Readable<ComboboxOption<Value> | undefined>;
        inputValue: {
            debouncedSet: (value: string) => void;
            debouncedUpdate: (fn: (value: string) => string) => void;
            set: (value: string) => void;
            update: (fn: (value: string) => string) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<{
                value: string;
                debounced: string;
            }>, invalidate?: import("svelte/store").Invalidator<{
                value: string;
                debounced: string;
            }> | undefined): import("svelte/store").Unsubscriber;
        };
        isEmpty: Readable<boolean>;
    };
    helpers: {
        isSelected: Readable<(item: Value) => boolean>;
        isHighlighted: Readable<(item: Value) => boolean>;
    };
    options: {
        forceVisible: Writable<boolean>;
        onOpenChange?: Writable<import("../../internal/helpers/index.js").ChangeFn<boolean> | undefined> | undefined;
        preventScroll: Writable<boolean>;
        portal: Writable<string | HTMLElement | null | undefined>;
        positioning: Writable<import("../../internal/actions/index.js").FloatingConfig | {
            placement: "bottom";
            sameWidth: true;
        }>;
        scrollAlignment: Writable<"center" | "nearest">;
        filterFunction: Writable<import("./types.js").ComboboxFilterFunction<Value>>;
        loop: Writable<boolean>;
        defaultSelected?: Writable<ComboboxOption<Value> | undefined> | undefined;
        selected?: Writable<Writable<ComboboxOption<Value> | undefined> | undefined> | undefined;
        onSelectedChange?: Writable<import("../../internal/helpers/index.js").ChangeFn<ComboboxOption<Value> | undefined> | undefined> | undefined;
        closeOnOutsideClick: Writable<boolean>;
        closeOnEscape: Writable<boolean>;
    };
};
