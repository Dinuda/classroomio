/// <reference types="svelte" />
import type { MeltActionReturn } from '../../internal/types.js';
import type { SelectEvents } from './events.js';
import type { CreateSelectProps, SelectOption, SelectOptionProps } from './types.js';
export declare function createSelect<Value = unknown, Multiple extends boolean = false, Selected extends Multiple extends true ? Array<SelectOption<Value>> : SelectOption<Value> = Multiple extends true ? Array<SelectOption<Value>> : SelectOption<Value>>(props?: CreateSelectProps<Value, Multiple, Selected>): {
    elements: {
        menu: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("svelte/store").Readable<boolean>, import("svelte/store").Writable<string | HTMLElement | null | undefined>], (node: HTMLElement) => MeltActionReturn<SelectEvents['menu']>, ([$isVisible, $portal]: [boolean, string | HTMLElement | null | undefined]) => {
            style: string;
            id: string;
            'aria-labelledby': string;
            role: string;
            'data-portal': string | undefined;
        }, string>;
        trigger: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>], (node: HTMLElement) => MeltActionReturn<SelectEvents['trigger']>, ([$open, $disabled, $required]: [boolean, boolean, boolean]) => {
            readonly role: "combobox";
            readonly type: "button";
            readonly 'aria-autocomplete': "none";
            readonly 'aria-haspopup': "listbox";
            readonly 'aria-controls': string;
            readonly 'aria-expanded': boolean;
            readonly 'aria-required': boolean;
            readonly 'data-state': "open" | "closed";
            readonly 'data-disabled': true | undefined;
            readonly 'aria-labelledby': string;
            readonly 'data-melt-id': string;
            readonly disabled: boolean;
            readonly id: string;
            readonly tabindex: 0;
        }, string>;
        option: import("../../internal/helpers/index.js").ExplicitBuilderReturn<{
            update: (updater: import("svelte/store").Updater<Selected | undefined>, sideEffect?: ((newValue: Selected | undefined) => void) | undefined) => void;
            set: (this: void, value: Selected | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<Selected | undefined>, invalidate?: import("svelte/store").Invalidator<Selected | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, (node: HTMLElement) => MeltActionReturn<SelectEvents['option']>, ($selected: Selected | undefined) => (props: SelectOptionProps<Value>) => {
            readonly role: "option";
            readonly 'aria-selected': boolean;
            readonly 'data-selected': "" | undefined;
            readonly 'data-value': string;
            readonly 'data-label': string | undefined;
            readonly 'data-disabled': "" | undefined;
            readonly tabindex: -1;
        }, string>;
        input: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[{
            update: (updater: import("svelte/store").Updater<Selected | undefined>, sideEffect?: ((newValue: Selected | undefined) => void) | undefined) => void;
            set: (this: void, value: Selected | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<Selected | undefined>, invalidate?: import("svelte/store").Invalidator<Selected | undefined> | undefined): import("svelte/store").Unsubscriber;
        }, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<boolean>, import("svelte/store").Writable<string | undefined>], import("svelte/action").Action<any, any, Record<never, any>>, ([$value, $required, $disabled, $nameStore]: [Selected | undefined, boolean, boolean, string | undefined]) => {
            type: string;
            name: string | undefined;
            value: Selected | undefined;
            'aria-hidden': boolean;
            hidden: boolean;
            tabIndex: number;
            required: boolean;
            disabled: boolean;
            style: string;
        }, string>;
        group: import("../../internal/helpers/index.js").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => (groupId: string) => {
            role: string;
            'aria-labelledby': string;
        }, string>;
        groupLabel: import("../../internal/helpers/index.js").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, import("svelte/action").Action<any, any, Record<never, any>>, () => (groupId: string) => {
            id: string;
        }, string>;
        arrow: import("../../internal/helpers/index.js").ExplicitBuilderReturn<import("svelte/store").Writable<number>, import("svelte/action").Action<any, any, Record<never, any>>, ($arrowSize: number) => {
            'data-arrow': boolean;
            style: string;
        }, string>;
        separator: import("../../internal/helpers/index.js").ExplicitBuilderReturn<[import("svelte/store").Writable<import("../../internal/types.js").Orientation>, import("svelte/store").Writable<boolean>], import("svelte/action").Action<any, any, Record<never, any>>, ([$orientation, $decorative]: [import("../../internal/types.js").Orientation, boolean]) => {
            role: string;
            'aria-orientation': "vertical" | undefined;
            'aria-hidden': boolean;
            'data-orientation': import("../../internal/types.js").Orientation;
        }, "separator">;
        label: import("../../internal/helpers/index.js").ExplicitBuilderReturn<import("svelte/store").Stores | undefined, <Node_1 extends any>(node: Node_1) => MeltActionReturn<SelectEvents['label']>, () => {
            id: string;
            for: string;
        }, string>;
    };
    states: {
        open: {
            update: (updater: import("svelte/store").Updater<boolean>, sideEffect?: ((newValue: boolean) => void) | undefined) => void;
            set: (this: void, value: boolean) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<boolean>, invalidate?: import("svelte/store").Invalidator<boolean> | undefined): import("svelte/store").Unsubscriber;
        };
        selected: {
            update: (updater: import("svelte/store").Updater<Selected | undefined>, sideEffect?: ((newValue: Selected | undefined) => void) | undefined) => void;
            set: (this: void, value: Selected | undefined) => void;
            subscribe(this: void, run: import("svelte/store").Subscriber<Selected | undefined>, invalidate?: import("svelte/store").Invalidator<Selected | undefined> | undefined): import("svelte/store").Unsubscriber;
        };
        selectedLabel: import("svelte/store").Readable<string>;
    };
    helpers: {
        isSelected: import("svelte/store").Readable<(value: Value) => boolean>;
    };
    options: {
        multiple: import("svelte/store").Writable<Multiple>;
        disabled: import("svelte/store").Writable<boolean>;
        forceVisible: import("svelte/store").Writable<boolean>;
        name: import("svelte/store").Writable<string | undefined>;
        required: import("svelte/store").Writable<boolean>;
        preventScroll: import("svelte/store").Writable<boolean>;
        portal: import("svelte/store").Writable<string | HTMLElement | null | undefined>;
        positioning: import("svelte/store").Writable<import("../../internal/actions/index.js").FloatingConfig | {
            placement: "bottom";
            sameWidth: true;
        }>;
        loop: import("svelte/store").Writable<boolean>;
        closeOnOutsideClick: import("svelte/store").Writable<boolean>;
        closeOnEscape: import("svelte/store").Writable<boolean>;
        arrowSize: import("svelte/store").Writable<number>;
    };
};
